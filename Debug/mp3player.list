
mp3player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005b40  08005b40  00006b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca0  08005ca0  00007074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ca0  08005ca0  00006ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ca8  08005ca8  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ca8  08005ca8  00006ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cac  08005cac  00006cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08005cb0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008728  20000074  08005d24  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000879c  08005d24  0000779c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014604  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ab  00000000  00000000  0001b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0001ea58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f29  00000000  00000000  0001fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001979e  00000000  00000000  00020d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d1b  00000000  00000000  0003a4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009959b  00000000  00000000  000511d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea76d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  000ea7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000efda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b28 	.word	0x08005b28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005b28 	.word	0x08005b28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000090 	.word	0x20000090
 80005ec:	200000e4 	.word	0x200000e4

080005f0 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005f0:	b40f      	push	{r0, r1, r2, r3}
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <myprintf+0x44>)
 8000608:	f004 fe02 	bl	8005210 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <myprintf+0x44>)
 800060e:	f7ff fde7 	bl	80001e0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	b29a      	uxth	r2, r3
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	4905      	ldr	r1, [pc, #20]	@ (8000634 <myprintf+0x44>)
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <myprintf+0x48>)
 8000622:	f002 fc33 	bl	8002e8c <HAL_UART_Transmit>

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000630:	b004      	add	sp, #16
 8000632:	4770      	bx	lr
 8000634:	2000039c 	.word	0x2000039c
 8000638:	2000033c 	.word	0x2000033c

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b0aa      	sub	sp, #168	@ 0xa8
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fbe1 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f895 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f95d 	bl	8000908 <MX_GPIO_Init>
  MX_SPI1_Init();
 800064e:	f000 f8fb 	bl	8000848 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f92f 	bl	80008b4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000656:	f002 ffd5 	bl	8003604 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800065a:	4b3a      	ldr	r3, [pc, #232]	@ (8000744 <main+0x108>)
 800065c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fb5d 	bl	8003d34 <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a32      	ldr	r2, [pc, #200]	@ (8000748 <main+0x10c>)
 800067e:	6013      	str	r3, [r2, #0]

  /* definition and creation of GUI_Task */
  osThreadDef(GUI_Task, GUI_Init, osPriorityBelowNormal, 0, 1024);
 8000680:	4b32      	ldr	r3, [pc, #200]	@ (800074c <main+0x110>)
 8000682:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GUI_TaskHandle = osThreadCreate(osThread(GUI_Task), NULL);
 8000694:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fb4a 	bl	8003d34 <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <main+0x114>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Audio_Task */
  osThreadDef(Audio_Task, Audio_Init, osPriorityHigh, 0, 256);
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <main+0x118>)
 80006a8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Audio_TaskHandle = osThreadCreate(osThread(Audio_Task), NULL);
 80006ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fb37 	bl	8003d34 <osThreadCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <main+0x11c>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mp3Decoder_Task */
  osThreadDef(Mp3Decoder_Task, Decoder_Init, osPriorityAboveNormal, 0, 1024);
 80006cc:	4b23      	ldr	r3, [pc, #140]	@ (800075c <main+0x120>)
 80006ce:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80006d2:	461d      	mov	r5, r3
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Mp3Decoder_TaskHandle = osThreadCreate(osThread(Mp3Decoder_Task), NULL);
 80006e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fb24 	bl	8003d34 <osThreadCreate>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <main+0x124>)
 80006f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of SdCard_Task */
  osThreadDef(SdCard_Task, SD_Init, osPriorityAboveNormal, 0, 512);
 80006f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <main+0x128>)
 80006f4:	f107 041c 	add.w	r4, r7, #28
 80006f8:	461d      	mov	r5, r3
 80006fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000702:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCard_TaskHandle = osThreadCreate(osThread(SdCard_Task), NULL);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fb11 	bl	8003d34 <osThreadCreate>
 8000712:	4603      	mov	r3, r0
 8000714:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <main+0x12c>)
 8000716:	6013      	str	r3, [r2, #0]

  /* definition and creation of Playback_Task */
  osThreadDef(Playback_Task, Playback_Init, osPriorityNormal, 0, 256);
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <main+0x130>)
 800071a:	463c      	mov	r4, r7
 800071c:	461d      	mov	r5, r3
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Playback_TaskHandle = osThreadCreate(osThread(Playback_Task), NULL);
 800072a:	463b      	mov	r3, r7
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fb00 	bl	8003d34 <osThreadCreate>
 8000734:	4603      	mov	r3, r0
 8000736:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <main+0x134>)
 8000738:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800073a:	f003 faf4 	bl	8003d26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073e:	bf00      	nop
 8000740:	e7fd      	b.n	800073e <main+0x102>
 8000742:	bf00      	nop
 8000744:	08005b4c 	.word	0x08005b4c
 8000748:	20000384 	.word	0x20000384
 800074c:	08005b74 	.word	0x08005b74
 8000750:	20000388 	.word	0x20000388
 8000754:	08005b9c 	.word	0x08005b9c
 8000758:	2000038c 	.word	0x2000038c
 800075c:	08005bc8 	.word	0x08005bc8
 8000760:	20000390 	.word	0x20000390
 8000764:	08005bf0 	.word	0x08005bf0
 8000768:	20000394 	.word	0x20000394
 800076c:	08005c1c 	.word	0x08005c1c
 8000770:	20000398 	.word	0x20000398

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	@ 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2230      	movs	r2, #48	@ 0x30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fd52 	bl	800522c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	4a27      	ldr	r2, [pc, #156]	@ (8000840 <SystemClock_Config+0xcc>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a8:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <SystemClock_Config+0xd0>)
 80007be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007e8:	2364      	movs	r3, #100	@ 0x64
 80007ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fdc7 	bl	800138c <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000804:	f000 f932 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2103      	movs	r1, #3
 8000824:	4618      	mov	r0, r3
 8000826:	f001 f829 	bl	800187c <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000830:	f000 f91c 	bl	8000a6c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000834:	f001 f908 	bl	8001a48 <HAL_RCC_EnableCSS>
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	@ 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_SPI1_Init+0x64>)
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000854:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000894:	220a      	movs	r2, #10
 8000896:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_SPI1_Init+0x64>)
 800089a:	f001 fa68 	bl	8001d6e <HAL_SPI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a4:	f000 f8e2 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200002e4 	.word	0x200002e4
 80008b0:	40013000 	.word	0x40013000

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f002 fa7e 	bl	8002dec <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f8b9 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000033c 	.word	0x2000033c
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <MX_GPIO_Init+0xc4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a29      	ldr	r2, [pc, #164]	@ (80009cc <MX_GPIO_Init+0xc4>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <MX_GPIO_Init+0xc4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <MX_GPIO_Init+0xc4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a22      	ldr	r2, [pc, #136]	@ (80009cc <MX_GPIO_Init+0xc4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <MX_GPIO_Init+0xc4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_GPIO_Init+0xc4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a1b      	ldr	r2, [pc, #108]	@ (80009cc <MX_GPIO_Init+0xc4>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <MX_GPIO_Init+0xc4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000978:	4815      	ldr	r0, [pc, #84]	@ (80009d0 <MX_GPIO_Init+0xc8>)
 800097a:	f000 fced 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2120      	movs	r1, #32
 8000982:	4814      	ldr	r0, [pc, #80]	@ (80009d4 <MX_GPIO_Init+0xcc>)
 8000984:	f000 fce8 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_SPI_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI_CS_Pin;
 8000988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <MX_GPIO_Init+0xc8>)
 80009a2:	f000 fb55 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009a6:	2320      	movs	r3, #32
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_GPIO_Init+0xcc>)
 80009be:	f000 fb47 	bl	8001050 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f003 f9f3 	bl	8003dcc <osDelay>
 80009e6:	e7fb      	b.n	80009e0 <StartDefaultTask+0x8>

080009e8 <GUI_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GUI_Init */
void GUI_Init(void const * argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GUI_Init */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f003 f9eb 	bl	8003dcc <osDelay>
 80009f6:	e7fb      	b.n	80009f0 <GUI_Init+0x8>

080009f8 <Audio_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Audio_Init */
void Audio_Init(void const * argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Audio_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f003 f9e3 	bl	8003dcc <osDelay>
 8000a06:	e7fb      	b.n	8000a00 <Audio_Init+0x8>

08000a08 <Decoder_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Decoder_Init */
void Decoder_Init(void const * argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Decoder_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f003 f9db 	bl	8003dcc <osDelay>
 8000a16:	e7fb      	b.n	8000a10 <Decoder_Init+0x8>

08000a18 <SD_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SD_Init */
void SD_Init(void const * argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SD_Init */
  /* Infinite loop */
  for(;;)
  {
	myprintf("In SD Card init.\n");
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <SD_Init+0x1c>)
 8000a22:	f7ff fde5 	bl	80005f0 <myprintf>
    osDelay(10000);
 8000a26:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000a2a:	f003 f9cf 	bl	8003dcc <osDelay>
	myprintf("In SD Card init.\n");
 8000a2e:	bf00      	nop
 8000a30:	e7f6      	b.n	8000a20 <SD_Init+0x8>
 8000a32:	bf00      	nop
 8000a34:	08005c38 	.word	0x08005c38

08000a38 <Playback_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Playback_Init */
void Playback_Init(void const * argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Playback_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f003 f9c3 	bl	8003dcc <osDelay>
 8000a46:	e7fb      	b.n	8000a40 <Playback_Init+0x8>

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a5a:	f000 f9f7 	bl	8000e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010000 	.word	0x40010000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <Error_Handler+0x8>

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a11      	ldr	r2, [pc, #68]	@ (8000acc <HAL_MspInit+0x54>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_MspInit+0x54>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <HAL_MspInit+0x54>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <HAL_MspInit+0x54>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	210f      	movs	r1, #15
 8000aba:	f06f 0001 	mvn.w	r0, #1
 8000abe:	f000 fa9d 	bl	8000ffc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	@ (8000b54 <HAL_SPI_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12b      	bne.n	8000b4a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a17      	ldr	r2, [pc, #92]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000afc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a10      	ldr	r2, [pc, #64]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b2a:	23e0      	movs	r3, #224	@ 0xe0
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <HAL_SPI_MspInit+0x8c>)
 8000b46:	f000 fa83 	bl	8001050 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40013000 	.word	0x40013000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_UART_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12b      	bne.n	8000bda <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a10      	ldr	r2, [pc, #64]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bba:	230c      	movs	r3, #12
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bca:	2307      	movs	r3, #7
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <HAL_UART_MspInit+0x8c>)
 8000bd6:	f000 fa3b 	bl	8001050 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	@ 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <HAL_InitTick+0xd0>)
 8000c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c08:	4a2d      	ldr	r2, [pc, #180]	@ (8000cc0 <HAL_InitTick+0xd0>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c10:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <HAL_InitTick+0xd0>)
 8000c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1c:	f107 020c 	add.w	r2, r7, #12
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 f854 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c2c:	f001 f83e 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8000c30:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c34:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <HAL_InitTick+0xd4>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	0c9b      	lsrs	r3, r3, #18
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c40:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <HAL_InitTick+0xd8>)
 8000c42:	4a22      	ldr	r2, [pc, #136]	@ (8000ccc <HAL_InitTick+0xdc>)
 8000c44:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <HAL_InitTick+0xd8>)
 8000c48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc8 <HAL_InitTick+0xd8>)
 8000c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <HAL_InitTick+0xd8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <HAL_InitTick+0xd8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <HAL_InitTick+0xd8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c66:	4818      	ldr	r0, [pc, #96]	@ (8000cc8 <HAL_InitTick+0xd8>)
 8000c68:	f001 fe52 	bl	8002910 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d11b      	bne.n	8000cb2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c7a:	4813      	ldr	r0, [pc, #76]	@ (8000cc8 <HAL_InitTick+0xd8>)
 8000c7c:	f001 fea2 	bl	80029c4 <HAL_TIM_Base_Start_IT>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d111      	bne.n	8000cb2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c8e:	2019      	movs	r0, #25
 8000c90:	f000 f9d0 	bl	8001034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d808      	bhi.n	8000cac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	2019      	movs	r0, #25
 8000ca0:	f000 f9ac 	bl	8000ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_InitTick+0xe0>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e002      	b.n	8000cb2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3730      	adds	r7, #48	@ 0x30
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	2000049c 	.word	0x2000049c
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000cd8:	f001 f82e 	bl	8001d38 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <NMI_Handler+0x8>

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <MemManage_Handler+0x4>

08000cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <UsageFault_Handler+0x4>

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d16:	f001 feb7 	bl	8002a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000049c 	.word	0x2000049c

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f004 fa72 	bl	800523c <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20020000 	.word	0x20020000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	200004e4 	.word	0x200004e4
 8000d8c:	200087a0 	.word	0x200087a0

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db8:	f7ff ffea 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	@ (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f004 fa31 	bl	8005248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc29 	bl	800063c <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000df8:	08005cb0 	.word	0x08005cb0
  ldr r2, =_sbss
 8000dfc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e00:	2000879c 	.word	0x2000879c

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f8d8 	bl	8000fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	200f      	movs	r0, #15
 8000e38:	f7ff feda 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fe1c 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	200004e8 	.word	0x200004e8

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200004e8 	.word	0x200004e8

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff4c 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100e:	f7ff ff61 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	6978      	ldr	r0, [r7, #20]
 800101a:	f7ff ffb1 	bl	8000f80 <NVIC_EncodePriority>
 800101e:	4602      	mov	r2, r0
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff80 	bl	8000f2c <__NVIC_SetPriority>
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff54 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e159      	b.n	8001320 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8148 	bne.w	800131a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80a2 	beq.w	800131a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b57      	ldr	r3, [pc, #348]	@ (8001338 <HAL_GPIO_Init+0x2e8>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a56      	ldr	r2, [pc, #344]	@ (8001338 <HAL_GPIO_Init+0x2e8>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b54      	ldr	r3, [pc, #336]	@ (8001338 <HAL_GPIO_Init+0x2e8>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f2:	4a52      	ldr	r2, [pc, #328]	@ (800133c <HAL_GPIO_Init+0x2ec>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a49      	ldr	r2, [pc, #292]	@ (8001340 <HAL_GPIO_Init+0x2f0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x202>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a48      	ldr	r2, [pc, #288]	@ (8001344 <HAL_GPIO_Init+0x2f4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x1fe>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a47      	ldr	r2, [pc, #284]	@ (8001348 <HAL_GPIO_Init+0x2f8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x1fa>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a46      	ldr	r2, [pc, #280]	@ (800134c <HAL_GPIO_Init+0x2fc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x1f6>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a45      	ldr	r2, [pc, #276]	@ (8001350 <HAL_GPIO_Init+0x300>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x1f2>
 800123e:	2304      	movs	r3, #4
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x204>
 8001242:	2307      	movs	r3, #7
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x204>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x204>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x204>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x204>
 8001252:	2300      	movs	r3, #0
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f002 0203 	and.w	r2, r2, #3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001264:	4935      	ldr	r1, [pc, #212]	@ (800133c <HAL_GPIO_Init+0x2ec>)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001272:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <HAL_GPIO_Init+0x304>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001296:	4a2f      	ldr	r2, [pc, #188]	@ (8001354 <HAL_GPIO_Init+0x304>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <HAL_GPIO_Init+0x304>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c0:	4a24      	ldr	r2, [pc, #144]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012c6:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001314:	4a0f      	ldr	r2, [pc, #60]	@ (8001354 <HAL_GPIO_Init+0x304>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	f67f aea2 	bls.w	800106c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3724      	adds	r7, #36	@ 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40013800 	.word	0x40013800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40021000 	.word	0x40021000
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e267      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d075      	beq.n	8001496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013aa:	4b88      	ldr	r3, [pc, #544]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d00c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b85      	ldr	r3, [pc, #532]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d112      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4b82      	ldr	r3, [pc, #520]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013ce:	d10b      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	4b7e      	ldr	r3, [pc, #504]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d05b      	beq.n	8001494 <HAL_RCC_OscConfig+0x108>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d157      	bne.n	8001494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e242      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x74>
 80013f2:	4b76      	ldr	r3, [pc, #472]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a75      	ldr	r2, [pc, #468]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xb0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x98>
 800140a:	4b70      	ldr	r3, [pc, #448]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6f      	ldr	r2, [pc, #444]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b6d      	ldr	r3, [pc, #436]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6c      	ldr	r2, [pc, #432]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xb0>
 8001424:	4b69      	ldr	r3, [pc, #420]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a68      	ldr	r2, [pc, #416]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b66      	ldr	r3, [pc, #408]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a65      	ldr	r2, [pc, #404]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fd16 	bl	8000e74 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fd12 	bl	8000e74 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e207      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b5b      	ldr	r3, [pc, #364]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xc0>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fd02 	bl	8000e74 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fcfe 	bl	8000e74 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e1f3      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0xe8>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d063      	beq.n	800156a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014a2:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d11c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e1c7      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4937      	ldr	r1, [pc, #220]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	e03a      	b.n	800156a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <HAL_RCC_OscConfig+0x244>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fcb7 	bl	8000e74 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fcb3 	bl	8000e74 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e1a8      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4925      	ldr	r1, [pc, #148]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <HAL_RCC_OscConfig+0x244>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc96 	bl	8000e74 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fc92 	bl	8000e74 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e187      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d036      	beq.n	80015e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d016      	beq.n	80015ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_RCC_OscConfig+0x248>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fc76 	bl	8000e74 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fc72 	bl	8000e74 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e167      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80015a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x200>
 80015aa:	e01b      	b.n	80015e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_RCC_OscConfig+0x248>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fc5f 	bl	8000e74 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	e00e      	b.n	80015d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fc5b 	bl	8000e74 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d907      	bls.n	80015d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e150      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
 80015cc:	40023800 	.word	0x40023800
 80015d0:	42470000 	.word	0x42470000
 80015d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b88      	ldr	r3, [pc, #544]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ea      	bne.n	80015ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8097 	beq.w	8001720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b81      	ldr	r3, [pc, #516]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10f      	bne.n	8001622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a7c      	ldr	r2, [pc, #496]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b7a      	ldr	r3, [pc, #488]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b77      	ldr	r3, [pc, #476]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d118      	bne.n	8001660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b74      	ldr	r3, [pc, #464]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a73      	ldr	r2, [pc, #460]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff fc1b 	bl	8000e74 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff fc17 	bl	8000e74 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e10c      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b6a      	ldr	r3, [pc, #424]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x2ea>
 8001668:	4b64      	ldr	r3, [pc, #400]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800166c:	4a63      	ldr	r2, [pc, #396]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6713      	str	r3, [r2, #112]	@ 0x70
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x324>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x30c>
 800167e:	4b5f      	ldr	r3, [pc, #380]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001682:	4a5e      	ldr	r2, [pc, #376]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6713      	str	r3, [r2, #112]	@ 0x70
 800168a:	4b5c      	ldr	r3, [pc, #368]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168e:	4a5b      	ldr	r2, [pc, #364]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6713      	str	r3, [r2, #112]	@ 0x70
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x324>
 8001698:	4b58      	ldr	r3, [pc, #352]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169c:	4a57      	ldr	r2, [pc, #348]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a4:	4b55      	ldr	r3, [pc, #340]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a8:	4a54      	ldr	r2, [pc, #336]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d015      	beq.n	80016e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff fbdc 	bl	8000e74 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff fbd8 	bl	8000e74 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0cb      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	4b49      	ldr	r3, [pc, #292]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0ee      	beq.n	80016c0 <HAL_RCC_OscConfig+0x334>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fbc6 	bl	8000e74 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fbc2 	bl	8000e74 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0b5      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a38      	ldr	r2, [pc, #224]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800171a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80a1 	beq.w	800186c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d05c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d141      	bne.n	80017c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fb96 	bl	8000e74 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff fb92 	bl	8000e74 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e087      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	491b      	ldr	r1, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff fb6b 	bl	8000e74 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff fb67 	bl	8000e74 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e05c      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x416>
 80017c0:	e054      	b.n	800186c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb54 	bl	8000e74 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fb50 	bl	8000e74 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e045      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x444>
 80017ee:	e03d      	b.n	800186c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e038      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000
 8001804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_RCC_OscConfig+0x4ec>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d028      	beq.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d121      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d11a      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800183e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001840:	4293      	cmp	r3, r2
 8001842:	d111      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	085b      	lsrs	r3, r3, #1
 8001850:	3b01      	subs	r3, #1
 8001852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d107      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0cc      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b68      	ldr	r3, [pc, #416]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d90c      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b65      	ldr	r3, [pc, #404]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b63      	ldr	r3, [pc, #396]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b8      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d0:	4b59      	ldr	r3, [pc, #356]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a58      	ldr	r2, [pc, #352]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a52      	ldr	r2, [pc, #328]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b50      	ldr	r3, [pc, #320]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	494d      	ldr	r1, [pc, #308]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d044      	beq.n	800199c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b47      	ldr	r3, [pc, #284]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d119      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e07f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d003      	beq.n	800193a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	2b03      	cmp	r3, #3
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e067      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195a:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 0203 	bic.w	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4934      	ldr	r1, [pc, #208]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800196c:	f7ff fa82 	bl	8000e74 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	e00a      	b.n	800198a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff fa7e 	bl	8000e74 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e04f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 020c 	and.w	r2, r3, #12
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	429a      	cmp	r2, r3
 800199a:	d1eb      	bne.n	8001974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d20c      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e032      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4916      	ldr	r1, [pc, #88]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	490e      	ldr	r1, [pc, #56]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a02:	f000 f82d 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	490a      	ldr	r1, [pc, #40]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	5ccb      	ldrb	r3, [r1, r3]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f8e4 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08005c54 	.word	0x08005c54
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <HAL_RCC_EnableCSS+0x14>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	4247004c 	.word	0x4247004c

08001a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a64:	b094      	sub	sp, #80	@ 0x50
 8001a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a78:	4b79      	ldr	r3, [pc, #484]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d00d      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	f200 80e1 	bhi.w	8001c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x34>
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a92:	e0db      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b73      	ldr	r3, [pc, #460]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a98:	e0db      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9a:	4b73      	ldr	r3, [pc, #460]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a9e:	e0d8      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aa8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	2200      	movs	r2, #0
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	0159      	lsls	r1, r3, #5
 8001ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae4:	0150      	lsls	r0, r2, #5
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4621      	mov	r1, r4
 8001aec:	1a51      	subs	r1, r2, r1
 8001aee:	6139      	str	r1, [r7, #16]
 8001af0:	4629      	mov	r1, r5
 8001af2:	eb63 0301 	sbc.w	r3, r3, r1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b04:	4659      	mov	r1, fp
 8001b06:	018b      	lsls	r3, r1, #6
 8001b08:	4651      	mov	r1, sl
 8001b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b0e:	4651      	mov	r1, sl
 8001b10:	018a      	lsls	r2, r1, #6
 8001b12:	4651      	mov	r1, sl
 8001b14:	ebb2 0801 	subs.w	r8, r2, r1
 8001b18:	4659      	mov	r1, fp
 8001b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b32:	4690      	mov	r8, r2
 8001b34:	4699      	mov	r9, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	eb18 0303 	adds.w	r3, r8, r3
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	462b      	mov	r3, r5
 8001b40:	eb49 0303 	adc.w	r3, r9, r3
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b52:	4629      	mov	r1, r5
 8001b54:	024b      	lsls	r3, r1, #9
 8001b56:	4621      	mov	r1, r4
 8001b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	024a      	lsls	r2, r1, #9
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b66:	2200      	movs	r2, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b70:	f7fe fb8e 	bl	8000290 <__aeabi_uldivmod>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b7c:	e058      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	4b38      	ldr	r3, [pc, #224]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	2200      	movs	r2, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	4611      	mov	r1, r2
 8001b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b98:	4642      	mov	r2, r8
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	0159      	lsls	r1, r3, #5
 8001ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001baa:	0150      	lsls	r0, r2, #5
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	00eb      	lsls	r3, r5, #3
 8001be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be6:	00e2      	lsls	r2, r4, #3
 8001be8:	4614      	mov	r4, r2
 8001bea:	461d      	mov	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	18e3      	adds	r3, r4, r3
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	eb45 0303 	adc.w	r3, r5, r3
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c06:	4629      	mov	r1, r5
 8001c08:	028b      	lsls	r3, r1, #10
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c10:	4621      	mov	r1, r4
 8001c12:	028a      	lsls	r2, r1, #10
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	61fa      	str	r2, [r7, #28]
 8001c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c24:	f7fe fb34 	bl	8000290 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3750      	adds	r7, #80	@ 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	007a1200 	.word	0x007a1200

08001c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	@ (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08005c64 	.word	0x08005c64

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cb0:	f7ff ffdc 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0b5b      	lsrs	r3, r3, #13
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	@ (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08005c64 	.word	0x08005c64

08001cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d44:	2b80      	cmp	r3, #128	@ 0x80
 8001d46:	d104      	bne.n	8001d52 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001d48:	f000 f80a 	bl	8001d60 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_RCC_NMI_IRQHandler+0x24>)
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	701a      	strb	r2, [r3, #0]
  }
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	4002380e 	.word	0x4002380e

08001d60 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e07b      	b.n	8001e78 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d108      	bne.n	8001d9a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d90:	d009      	beq.n	8001da6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
 8001d98:	e005      	b.n	8001da6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d106      	bne.n	8001dc6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7fe fe85 	bl	8000ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ddc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2a:	ea42 0103 	orr.w	r1, r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	f003 0104 	and.w	r1, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	f003 0210 	and.w	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e90:	f7fe fff0 	bl	8000e74 <HAL_GetTick>
 8001e94:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e12a      	b.n	8002100 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_SPI_Transmit+0x36>
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e122      	b.n	8002100 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_SPI_Transmit+0x48>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e11b      	b.n	8002100 <HAL_SPI_Transmit+0x280>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	88fa      	ldrh	r2, [r7, #6]
 8001ee8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f16:	d10f      	bne.n	8001f38 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f42:	2b40      	cmp	r3, #64	@ 0x40
 8001f44:	d007      	beq.n	8001f56 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f5e:	d152      	bne.n	8002006 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_SPI_Transmit+0xee>
 8001f68:	8b7b      	ldrh	r3, [r7, #26]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d145      	bne.n	8001ffa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	1c9a      	adds	r2, r3, #2
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f92:	e032      	b.n	8001ffa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d112      	bne.n	8001fc8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	881a      	ldrh	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	1c9a      	adds	r2, r3, #2
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001fc6:	e018      	b.n	8001ffa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc8:	f7fe ff54 	bl	8000e74 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d803      	bhi.n	8001fe0 <HAL_SPI_Transmit+0x160>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d102      	bne.n	8001fe6 <HAL_SPI_Transmit+0x166>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e082      	b.n	8002100 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1c7      	bne.n	8001f94 <HAL_SPI_Transmit+0x114>
 8002004:	e053      	b.n	80020ae <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_SPI_Transmit+0x194>
 800200e:	8b7b      	ldrh	r3, [r7, #26]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d147      	bne.n	80020a4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	330c      	adds	r3, #12
 800201e:	7812      	ldrb	r2, [r2, #0]
 8002020:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800203a:	e033      	b.n	80020a4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b02      	cmp	r3, #2
 8002048:	d113      	bne.n	8002072 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	330c      	adds	r3, #12
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002070:	e018      	b.n	80020a4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002072:	f7fe feff 	bl	8000e74 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d803      	bhi.n	800208a <HAL_SPI_Transmit+0x20a>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d102      	bne.n	8002090 <HAL_SPI_Transmit+0x210>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e02d      	b.n	8002100 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1c6      	bne.n	800203c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fbd8 	bl	8002868 <SPI_EndRxTxTransaction>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10a      	bne.n	80020e2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80020fe:	2300      	movs	r3, #0
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d001      	beq.n	8002128 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
 8002126:	e104      	b.n	8002332 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_SPI_Receive+0x2c>
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0fc      	b.n	8002332 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002140:	d112      	bne.n	8002168 <HAL_SPI_Receive+0x60>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10e      	bne.n	8002168 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2204      	movs	r2, #4
 800214e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f8eb 	bl	800233a <HAL_SPI_TransmitReceive>
 8002164:	4603      	mov	r3, r0
 8002166:	e0e4      	b.n	8002332 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002168:	f7fe fe84 	bl	8000e74 <HAL_GetTick>
 800216c:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_SPI_Receive+0x74>
 8002178:	2302      	movs	r3, #2
 800217a:	e0da      	b.n	8002332 <HAL_SPI_Receive+0x22a>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2204      	movs	r2, #4
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021ca:	d10f      	bne.n	80021ec <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f6:	2b40      	cmp	r3, #64	@ 0x40
 80021f8:	d007      	beq.n	800220a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d170      	bne.n	80022f4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002212:	e035      	b.n	8002280 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d115      	bne.n	800224e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f103 020c 	add.w	r2, r3, #12
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800224c:	e018      	b.n	8002280 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800224e:	f7fe fe11 	bl	8000e74 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d803      	bhi.n	8002266 <HAL_SPI_Receive+0x15e>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d102      	bne.n	800226c <HAL_SPI_Receive+0x164>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e058      	b.n	8002332 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1c4      	bne.n	8002214 <HAL_SPI_Receive+0x10c>
 800228a:	e038      	b.n	80022fe <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b01      	cmp	r3, #1
 8002298:	d113      	bne.n	80022c2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a4:	b292      	uxth	r2, r2
 80022a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	1c9a      	adds	r2, r3, #2
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022c0:	e018      	b.n	80022f4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022c2:	f7fe fdd7 	bl	8000e74 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d803      	bhi.n	80022da <HAL_SPI_Receive+0x1d2>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d102      	bne.n	80022e0 <HAL_SPI_Receive+0x1d8>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e01e      	b.n	8002332 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1c6      	bne.n	800228c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa4a 	bl	800279c <SPI_EndRxTransaction>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002330:	2300      	movs	r3, #0
  }
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b08a      	sub	sp, #40	@ 0x28
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002348:	2301      	movs	r3, #1
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800234c:	f7fe fd92 	bl	8000e74 <HAL_GetTick>
 8002350:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002358:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002364:	7ffb      	ldrb	r3, [r7, #31]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d00c      	beq.n	8002384 <HAL_SPI_TransmitReceive+0x4a>
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002370:	d106      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x46>
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d001      	beq.n	8002384 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002380:	2302      	movs	r3, #2
 8002382:	e17f      	b.n	8002684 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_SPI_TransmitReceive+0x5c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_SPI_TransmitReceive+0x5c>
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e174      	b.n	8002684 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_SPI_TransmitReceive+0x6e>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e16d      	b.n	8002684 <HAL_SPI_TransmitReceive+0x34a>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d003      	beq.n	80023c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2205      	movs	r2, #5
 80023c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	887a      	ldrh	r2, [r7, #2]
 80023da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d007      	beq.n	8002418 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002420:	d17e      	bne.n	8002520 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_SPI_TransmitReceive+0xf6>
 800242a:	8afb      	ldrh	r3, [r7, #22]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d16c      	bne.n	800250a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	881a      	ldrh	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	1c9a      	adds	r2, r3, #2
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002454:	e059      	b.n	800250a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d11b      	bne.n	800249c <HAL_SPI_TransmitReceive+0x162>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <HAL_SPI_TransmitReceive+0x162>
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	2b01      	cmp	r3, #1
 8002472:	d113      	bne.n	800249c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	1c9a      	adds	r2, r3, #2
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d119      	bne.n	80024de <HAL_SPI_TransmitReceive+0x1a4>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d014      	beq.n	80024de <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024be:	b292      	uxth	r2, r2
 80024c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c6:	1c9a      	adds	r2, r3, #2
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024da:	2301      	movs	r3, #1
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024de:	f7fe fcc9 	bl	8000e74 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d80d      	bhi.n	800250a <HAL_SPI_TransmitReceive+0x1d0>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d009      	beq.n	800250a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0bc      	b.n	8002684 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1a0      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x11c>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d19b      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x11c>
 800251e:	e082      	b.n	8002626 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_SPI_TransmitReceive+0x1f4>
 8002528:	8afb      	ldrh	r3, [r7, #22]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d171      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002554:	e05d      	b.n	8002612 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b02      	cmp	r3, #2
 8002562:	d11c      	bne.n	800259e <HAL_SPI_TransmitReceive+0x264>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d017      	beq.n	800259e <HAL_SPI_TransmitReceive+0x264>
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	2b01      	cmp	r3, #1
 8002572:	d114      	bne.n	800259e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	7812      	ldrb	r2, [r2, #0]
 8002580:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d119      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x2a6>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d014      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025dc:	2301      	movs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025e0:	f7fe fc48 	bl	8000e74 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d803      	bhi.n	80025f8 <HAL_SPI_TransmitReceive+0x2be>
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d102      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x2c4>
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e038      	b.n	8002684 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d19c      	bne.n	8002556 <HAL_SPI_TransmitReceive+0x21c>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d197      	bne.n	8002556 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002626:	6a3a      	ldr	r2, [r7, #32]
 8002628:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f91c 	bl	8002868 <SPI_EndRxTxTransaction>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e01d      	b.n	8002684 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002682:	2300      	movs	r3, #0
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3728      	adds	r7, #40	@ 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800269c:	f7fe fbea 	bl	8000e74 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026ac:	f7fe fbe2 	bl	8000e74 <HAL_GetTick>
 80026b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026b2:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	015b      	lsls	r3, r3, #5
 80026b8:	0d1b      	lsrs	r3, r3, #20
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026c2:	e055      	b.n	8002770 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ca:	d051      	beq.n	8002770 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026cc:	f7fe fbd2 	bl	8000e74 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d902      	bls.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d13d      	bne.n	800275e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026fa:	d111      	bne.n	8002720 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002704:	d004      	beq.n	8002710 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800270e:	d107      	bne.n	8002720 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800271e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002728:	d10f      	bne.n	800274a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002748:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e018      	b.n	8002790 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	e002      	b.n	8002770 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3b01      	subs	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4013      	ands	r3, r2
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	429a      	cmp	r2, r3
 800278c:	d19a      	bne.n	80026c4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000000 	.word	0x20000000

0800279c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027b0:	d111      	bne.n	80027d6 <SPI_EndRxTransaction+0x3a>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027ba:	d004      	beq.n	80027c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027c4:	d107      	bne.n	80027d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027de:	d12a      	bne.n	8002836 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e8:	d012      	beq.n	8002810 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7ff ff49 	bl	800268c <SPI_WaitFlagStateUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d02d      	beq.n	800285c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e026      	b.n	800285e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	2101      	movs	r1, #1
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff ff36 	bl	800268c <SPI_WaitFlagStateUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01a      	beq.n	800285c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	f043 0220 	orr.w	r2, r3, #32
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e013      	b.n	800285e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	2101      	movs	r1, #1
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff ff23 	bl	800268c <SPI_WaitFlagStateUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e000      	b.n	800285e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2201      	movs	r2, #1
 800287c:	2102      	movs	r1, #2
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ff04 	bl	800268c <SPI_WaitFlagStateUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e032      	b.n	8002900 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800289a:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <SPI_EndRxTxTransaction+0xa0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1b      	ldr	r2, [pc, #108]	@ (800290c <SPI_EndRxTxTransaction+0xa4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	0d5b      	lsrs	r3, r3, #21
 80028a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028b8:	d112      	bne.n	80028e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2180      	movs	r1, #128	@ 0x80
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fee1 	bl	800268c <SPI_WaitFlagStateUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d016      	beq.n	80028fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e00f      	b.n	8002900 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f6:	2b80      	cmp	r3, #128	@ 0x80
 80028f8:	d0f2      	beq.n	80028e0 <SPI_EndRxTxTransaction+0x78>
 80028fa:	e000      	b.n	80028fe <SPI_EndRxTxTransaction+0x96>
        break;
 80028fc:	bf00      	nop
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000000 	.word	0x20000000
 800290c:	165e9f81 	.word	0x165e9f81

08002910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e041      	b.n	80029a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f839 	bl	80029ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f000 f9b2 	bl	8002cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d001      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e044      	b.n	8002a66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a74 <HAL_TIM_Base_Start_IT+0xb0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d018      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x6c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a06:	d013      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x6c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002a78 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00e      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x6c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a19      	ldr	r2, [pc, #100]	@ (8002a7c <HAL_TIM_Base_Start_IT+0xb8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x6c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a17      	ldr	r2, [pc, #92]	@ (8002a80 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x6c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	@ (8002a84 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d111      	bne.n	8002a54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d010      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a52:	e007      	b.n	8002a64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40014000 	.word	0x40014000

08002a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d020      	beq.n	8002aec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0202 	mvn.w	r2, #2
 8002abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8d2 	bl	8002c7c <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8c4 	bl	8002c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8d5 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d020      	beq.n	8002b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01b      	beq.n	8002b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0204 	mvn.w	r2, #4
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8ac 	bl	8002c7c <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f89e 	bl	8002c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f8af 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d020      	beq.n	8002b84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01b      	beq.n	8002b84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0208 	mvn.w	r2, #8
 8002b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f886 	bl	8002c7c <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f878 	bl	8002c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f889 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d020      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01b      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0210 	mvn.w	r2, #16
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f860 	bl	8002c7c <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f852 	bl	8002c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f863 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0201 	mvn.w	r2, #1
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd ff2a 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8e0 	bl	8002dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f834 	bl	8002ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0220 	mvn.w	r2, #32
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8b2 	bl	8002dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a37      	ldr	r2, [pc, #220]	@ (8002da8 <TIM_Base_SetConfig+0xf0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00f      	beq.n	8002cf0 <TIM_Base_SetConfig+0x38>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd6:	d00b      	beq.n	8002cf0 <TIM_Base_SetConfig+0x38>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a34      	ldr	r2, [pc, #208]	@ (8002dac <TIM_Base_SetConfig+0xf4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <TIM_Base_SetConfig+0x38>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a33      	ldr	r2, [pc, #204]	@ (8002db0 <TIM_Base_SetConfig+0xf8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <TIM_Base_SetConfig+0x38>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a32      	ldr	r2, [pc, #200]	@ (8002db4 <TIM_Base_SetConfig+0xfc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a28      	ldr	r2, [pc, #160]	@ (8002da8 <TIM_Base_SetConfig+0xf0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01b      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d10:	d017      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a25      	ldr	r2, [pc, #148]	@ (8002dac <TIM_Base_SetConfig+0xf4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a24      	ldr	r2, [pc, #144]	@ (8002db0 <TIM_Base_SetConfig+0xf8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00f      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a23      	ldr	r2, [pc, #140]	@ (8002db4 <TIM_Base_SetConfig+0xfc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <TIM_Base_SetConfig+0x100>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a21      	ldr	r2, [pc, #132]	@ (8002dbc <TIM_Base_SetConfig+0x104>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0x8a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	@ (8002dc0 <TIM_Base_SetConfig+0x108>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a0c      	ldr	r2, [pc, #48]	@ (8002da8 <TIM_Base_SetConfig+0xf0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d103      	bne.n	8002d82 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800

08002dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e042      	b.n	8002e84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fea4 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	@ 0x24
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f973 	bl	800311c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d175      	bne.n	8002f98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Transmit+0x2c>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e06e      	b.n	8002f9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2221      	movs	r2, #33	@ 0x21
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eca:	f7fd ffd3 	bl	8000e74 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee4:	d108      	bne.n	8002ef8 <HAL_UART_Transmit+0x6c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e003      	b.n	8002f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f00:	e02e      	b.n	8002f60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f848 	bl	8002fa2 <UART_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e03a      	b.n	8002f9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e007      	b.n	8002f52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1cb      	bne.n	8002f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2140      	movs	r1, #64	@ 0x40
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f814 	bl	8002fa2 <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e006      	b.n	8002f9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb2:	e03b      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d037      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7fd ff5a 	bl	8000e74 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e03a      	b.n	800304c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d023      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b80      	cmp	r3, #128	@ 0x80
 8002fe8:	d020      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d01d      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d116      	bne.n	800302c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f81d 	bl	8003054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2208      	movs	r2, #8
 800301e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e00f      	b.n	800304c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4013      	ands	r3, r2
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	429a      	cmp	r2, r3
 8003048:	d0b4      	beq.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b095      	sub	sp, #84	@ 0x54
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800306c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800307c:	643a      	str	r2, [r7, #64]	@ 0x40
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003084:	e841 2300 	strex	r3, r2, [r1]
 8003088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800308a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e5      	bne.n	800305c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3314      	adds	r3, #20
 8003096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	61fb      	str	r3, [r7, #28]
   return(result);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e5      	bne.n	8003090 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d119      	bne.n	8003100 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	60bb      	str	r3, [r7, #8]
   return(result);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f023 0310 	bic.w	r3, r3, #16
 80030e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ec:	61ba      	str	r2, [r7, #24]
 80030ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6979      	ldr	r1, [r7, #20]
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	613b      	str	r3, [r7, #16]
   return(result);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e5      	bne.n	80030cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800310e:	bf00      	nop
 8003110:	3754      	adds	r7, #84	@ 0x54
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800311c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003120:	b0c0      	sub	sp, #256	@ 0x100
 8003122:	af00      	add	r7, sp, #0
 8003124:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	68d9      	ldr	r1, [r3, #12]
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	ea40 0301 	orr.w	r3, r0, r1
 8003144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	431a      	orrs	r2, r3
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	431a      	orrs	r2, r3
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003174:	f021 010c 	bic.w	r1, r1, #12
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003182:	430b      	orrs	r3, r1
 8003184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003196:	6999      	ldr	r1, [r3, #24]
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	ea40 0301 	orr.w	r3, r0, r1
 80031a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b8f      	ldr	r3, [pc, #572]	@ (80033e8 <UART_SetConfig+0x2cc>)
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d005      	beq.n	80031bc <UART_SetConfig+0xa0>
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b8d      	ldr	r3, [pc, #564]	@ (80033ec <UART_SetConfig+0x2d0>)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d104      	bne.n	80031c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7fe fd76 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 80031c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031c4:	e003      	b.n	80031ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031c6:	f7fe fd5d 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 80031ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031d8:	f040 810c 	bne.w	80033f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031ee:	4622      	mov	r2, r4
 80031f0:	462b      	mov	r3, r5
 80031f2:	1891      	adds	r1, r2, r2
 80031f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031f6:	415b      	adcs	r3, r3
 80031f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031fe:	4621      	mov	r1, r4
 8003200:	eb12 0801 	adds.w	r8, r2, r1
 8003204:	4629      	mov	r1, r5
 8003206:	eb43 0901 	adc.w	r9, r3, r1
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800321a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800321e:	4690      	mov	r8, r2
 8003220:	4699      	mov	r9, r3
 8003222:	4623      	mov	r3, r4
 8003224:	eb18 0303 	adds.w	r3, r8, r3
 8003228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800322c:	462b      	mov	r3, r5
 800322e:	eb49 0303 	adc.w	r3, r9, r3
 8003232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003242:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800324a:	460b      	mov	r3, r1
 800324c:	18db      	adds	r3, r3, r3
 800324e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003250:	4613      	mov	r3, r2
 8003252:	eb42 0303 	adc.w	r3, r2, r3
 8003256:	657b      	str	r3, [r7, #84]	@ 0x54
 8003258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800325c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003260:	f7fd f816 	bl	8000290 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4b61      	ldr	r3, [pc, #388]	@ (80033f0 <UART_SetConfig+0x2d4>)
 800326a:	fba3 2302 	umull	r2, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	011c      	lsls	r4, r3, #4
 8003272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800327c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003284:	4642      	mov	r2, r8
 8003286:	464b      	mov	r3, r9
 8003288:	1891      	adds	r1, r2, r2
 800328a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800328c:	415b      	adcs	r3, r3
 800328e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003294:	4641      	mov	r1, r8
 8003296:	eb12 0a01 	adds.w	sl, r2, r1
 800329a:	4649      	mov	r1, r9
 800329c:	eb43 0b01 	adc.w	fp, r3, r1
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032b4:	4692      	mov	sl, r2
 80032b6:	469b      	mov	fp, r3
 80032b8:	4643      	mov	r3, r8
 80032ba:	eb1a 0303 	adds.w	r3, sl, r3
 80032be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032c2:	464b      	mov	r3, r9
 80032c4:	eb4b 0303 	adc.w	r3, fp, r3
 80032c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032e0:	460b      	mov	r3, r1
 80032e2:	18db      	adds	r3, r3, r3
 80032e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80032e6:	4613      	mov	r3, r2
 80032e8:	eb42 0303 	adc.w	r3, r2, r3
 80032ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032f6:	f7fc ffcb 	bl	8000290 <__aeabi_uldivmod>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	4b3b      	ldr	r3, [pc, #236]	@ (80033f0 <UART_SetConfig+0x2d4>)
 8003302:	fba3 2301 	umull	r2, r3, r3, r1
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2264      	movs	r2, #100	@ 0x64
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	1acb      	subs	r3, r1, r3
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003316:	4b36      	ldr	r3, [pc, #216]	@ (80033f0 <UART_SetConfig+0x2d4>)
 8003318:	fba3 2302 	umull	r2, r3, r3, r2
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003324:	441c      	add	r4, r3
 8003326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003330:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003340:	415b      	adcs	r3, r3
 8003342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003348:	4641      	mov	r1, r8
 800334a:	1851      	adds	r1, r2, r1
 800334c:	6339      	str	r1, [r7, #48]	@ 0x30
 800334e:	4649      	mov	r1, r9
 8003350:	414b      	adcs	r3, r1
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003360:	4659      	mov	r1, fp
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4651      	mov	r1, sl
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4642      	mov	r2, r8
 8003376:	189b      	adds	r3, r3, r2
 8003378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800337c:	464b      	mov	r3, r9
 800337e:	460a      	mov	r2, r1
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003394:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800339c:	460b      	mov	r3, r1
 800339e:	18db      	adds	r3, r3, r3
 80033a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033a2:	4613      	mov	r3, r2
 80033a4:	eb42 0303 	adc.w	r3, r2, r3
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033b2:	f7fc ff6d 	bl	8000290 <__aeabi_uldivmod>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <UART_SetConfig+0x2d4>)
 80033bc:	fba3 1302 	umull	r1, r3, r3, r2
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	2164      	movs	r1, #100	@ 0x64
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	3332      	adds	r3, #50	@ 0x32
 80033ce:	4a08      	ldr	r2, [pc, #32]	@ (80033f0 <UART_SetConfig+0x2d4>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	f003 0207 	and.w	r2, r3, #7
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4422      	add	r2, r4
 80033e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033e4:	e106      	b.n	80035f4 <UART_SetConfig+0x4d8>
 80033e6:	bf00      	nop
 80033e8:	40011000 	.word	0x40011000
 80033ec:	40011400 	.word	0x40011400
 80033f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003406:	4642      	mov	r2, r8
 8003408:	464b      	mov	r3, r9
 800340a:	1891      	adds	r1, r2, r2
 800340c:	6239      	str	r1, [r7, #32]
 800340e:	415b      	adcs	r3, r3
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
 8003412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003416:	4641      	mov	r1, r8
 8003418:	1854      	adds	r4, r2, r1
 800341a:	4649      	mov	r1, r9
 800341c:	eb43 0501 	adc.w	r5, r3, r1
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	00eb      	lsls	r3, r5, #3
 800342a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800342e:	00e2      	lsls	r2, r4, #3
 8003430:	4614      	mov	r4, r2
 8003432:	461d      	mov	r5, r3
 8003434:	4643      	mov	r3, r8
 8003436:	18e3      	adds	r3, r4, r3
 8003438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800343c:	464b      	mov	r3, r9
 800343e:	eb45 0303 	adc.w	r3, r5, r3
 8003442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003462:	4629      	mov	r1, r5
 8003464:	008b      	lsls	r3, r1, #2
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800346c:	4621      	mov	r1, r4
 800346e:	008a      	lsls	r2, r1, #2
 8003470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003474:	f7fc ff0c 	bl	8000290 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4b60      	ldr	r3, [pc, #384]	@ (8003600 <UART_SetConfig+0x4e4>)
 800347e:	fba3 2302 	umull	r2, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	011c      	lsls	r4, r3, #4
 8003486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	1891      	adds	r1, r2, r2
 800349e:	61b9      	str	r1, [r7, #24]
 80034a0:	415b      	adcs	r3, r3
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a8:	4641      	mov	r1, r8
 80034aa:	1851      	adds	r1, r2, r1
 80034ac:	6139      	str	r1, [r7, #16]
 80034ae:	4649      	mov	r1, r9
 80034b0:	414b      	adcs	r3, r1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c0:	4659      	mov	r1, fp
 80034c2:	00cb      	lsls	r3, r1, #3
 80034c4:	4651      	mov	r1, sl
 80034c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ca:	4651      	mov	r1, sl
 80034cc:	00ca      	lsls	r2, r1, #3
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	4642      	mov	r2, r8
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034dc:	464b      	mov	r3, r9
 80034de:	460a      	mov	r2, r1
 80034e0:	eb42 0303 	adc.w	r3, r2, r3
 80034e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003500:	4649      	mov	r1, r9
 8003502:	008b      	lsls	r3, r1, #2
 8003504:	4641      	mov	r1, r8
 8003506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800350a:	4641      	mov	r1, r8
 800350c:	008a      	lsls	r2, r1, #2
 800350e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003512:	f7fc febd 	bl	8000290 <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4611      	mov	r1, r2
 800351c:	4b38      	ldr	r3, [pc, #224]	@ (8003600 <UART_SetConfig+0x4e4>)
 800351e:	fba3 2301 	umull	r2, r3, r3, r1
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2264      	movs	r2, #100	@ 0x64
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	1acb      	subs	r3, r1, r3
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	3332      	adds	r3, #50	@ 0x32
 8003530:	4a33      	ldr	r2, [pc, #204]	@ (8003600 <UART_SetConfig+0x4e4>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800353c:	441c      	add	r4, r3
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	673b      	str	r3, [r7, #112]	@ 0x70
 8003546:	677a      	str	r2, [r7, #116]	@ 0x74
 8003548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	1891      	adds	r1, r2, r2
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	415b      	adcs	r3, r3
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800355c:	4641      	mov	r1, r8
 800355e:	1851      	adds	r1, r2, r1
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	4649      	mov	r1, r9
 8003564:	414b      	adcs	r3, r1
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003574:	4659      	mov	r1, fp
 8003576:	00cb      	lsls	r3, r1, #3
 8003578:	4651      	mov	r1, sl
 800357a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800357e:	4651      	mov	r1, sl
 8003580:	00ca      	lsls	r2, r1, #3
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	4603      	mov	r3, r0
 8003588:	4642      	mov	r2, r8
 800358a:	189b      	adds	r3, r3, r2
 800358c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800358e:	464b      	mov	r3, r9
 8003590:	460a      	mov	r2, r1
 8003592:	eb42 0303 	adc.w	r3, r2, r3
 8003596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80035a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035b0:	4649      	mov	r1, r9
 80035b2:	008b      	lsls	r3, r1, #2
 80035b4:	4641      	mov	r1, r8
 80035b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ba:	4641      	mov	r1, r8
 80035bc:	008a      	lsls	r2, r1, #2
 80035be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035c2:	f7fc fe65 	bl	8000290 <__aeabi_uldivmod>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003600 <UART_SetConfig+0x4e4>)
 80035cc:	fba3 1302 	umull	r1, r3, r3, r2
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	2164      	movs	r1, #100	@ 0x64
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	3332      	adds	r3, #50	@ 0x32
 80035de:	4a08      	ldr	r2, [pc, #32]	@ (8003600 <UART_SetConfig+0x4e4>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	f003 020f 	and.w	r2, r3, #15
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4422      	add	r2, r4
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035fa:	46bd      	mov	sp, r7
 80035fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003600:	51eb851f 	.word	0x51eb851f

08003604 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003608:	4904      	ldr	r1, [pc, #16]	@ (800361c <MX_FATFS_Init+0x18>)
 800360a:	4805      	ldr	r0, [pc, #20]	@ (8003620 <MX_FATFS_Init+0x1c>)
 800360c:	f000 fb64 	bl	8003cd8 <FATFS_LinkDriver>
 8003610:	4603      	mov	r3, r0
 8003612:	461a      	mov	r2, r3
 8003614:	4b03      	ldr	r3, [pc, #12]	@ (8003624 <MX_FATFS_Init+0x20>)
 8003616:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	200004f0 	.word	0x200004f0
 8003620:	2000000c 	.word	0x2000000c
 8003624:	200004ec 	.word	0x200004ec

08003628 <CS_LOW>:
#define FCLK_SLOW() { MODIFY_REG(hspi1.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_128); }	/* Set SCLK = slow, approx 280 KBits/s*/
#define FCLK_FAST() { MODIFY_REG(hspi1.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_8); }	/* Set SCLK = fast, approx 4.5 MBits/s */

/** Functions ----------------------------------------------------------------*/

static void CS_LOW(void) {
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_RESET);
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003632:	4802      	ldr	r0, [pc, #8]	@ (800363c <CS_LOW+0x14>)
 8003634:	f7fd fe90 	bl	8001358 <HAL_GPIO_WritePin>
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40020000 	.word	0x40020000

08003640 <CS_HIGH>:

static void CS_HIGH(void) {
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8003644:	2201      	movs	r2, #1
 8003646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800364a:	4802      	ldr	r0, [pc, #8]	@ (8003654 <CS_HIGH+0x14>)
 800364c:	f7fd fe84 	bl	8001358 <HAL_GPIO_WritePin>
}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40020000 	.word	0x40020000

08003658 <SD_SPI_Sync>:

static bool SD_SPI_Sync(void) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af02      	add	r7, sp, #8
    BYTE dummy = 0xFF, rxData;
 800365e:	23ff      	movs	r3, #255	@ 0xff
 8003660:	70fb      	strb	r3, [r7, #3]
    uint32_t timeout = HAL_GetTick();
 8003662:	f7fd fc07 	bl	8000e74 <HAL_GetTick>
 8003666:	6078      	str	r0, [r7, #4]


    CS_LOW();
 8003668:	f7ff ffde 	bl	8003628 <CS_LOW>

    do {
        HAL_SPI_TransmitReceive(&hspi1, &dummy, &rxData, 1, 50);
 800366c:	1cba      	adds	r2, r7, #2
 800366e:	1cf9      	adds	r1, r7, #3
 8003670:	2332      	movs	r3, #50	@ 0x32
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2301      	movs	r3, #1
 8003676:	480a      	ldr	r0, [pc, #40]	@ (80036a0 <SD_SPI_Sync+0x48>)
 8003678:	f7fe fe5f 	bl	800233a <HAL_SPI_TransmitReceive>
        if (rxData == 0xFF) return true;
 800367c:	78bb      	ldrb	r3, [r7, #2]
 800367e:	2bff      	cmp	r3, #255	@ 0xff
 8003680:	d101      	bne.n	8003686 <SD_SPI_Sync+0x2e>
 8003682:	2301      	movs	r3, #1
 8003684:	e008      	b.n	8003698 <SD_SPI_Sync+0x40>
    } while (HAL_GetTick() - timeout < 500);
 8003686:	f7fd fbf5 	bl	8000e74 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003694:	d3ea      	bcc.n	800366c <SD_SPI_Sync+0x14>

    return false;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	200002e4 	.word	0x200002e4

080036a4 <SD_SendCommand>:

static BYTE SD_SendCommand(BYTE cmd, uint32_t arg, BYTE crc) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	@ 0x28
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	4603      	mov	r3, r0
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	71fb      	strb	r3, [r7, #7]
 80036b0:	4613      	mov	r3, r2
 80036b2:	71bb      	strb	r3, [r7, #6]
    BYTE buf[6];
    BYTE response = 0xFF;
 80036b4:	23ff      	movs	r3, #255	@ 0xff
 80036b6:	73fb      	strb	r3, [r7, #15]
    BYTE dummy = 0xFF;
 80036b8:	23ff      	movs	r3, #255	@ 0xff
 80036ba:	73bb      	strb	r3, [r7, #14]

    // Construct the command packet
    buf[0] = 0x40 | cmd;               // Command token
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	743b      	strb	r3, [r7, #16]
    buf[1] = (arg >> 24) & 0xFF;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	0e1b      	lsrs	r3, r3, #24
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	747b      	strb	r3, [r7, #17]
    buf[2] = (arg >> 16) & 0xFF;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	74bb      	strb	r3, [r7, #18]
    buf[3] = (arg >> 8) & 0xFF;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	74fb      	strb	r3, [r7, #19]
    buf[4] = arg & 0xFF;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	753b      	strb	r3, [r7, #20]
    buf[5] = crc;
 80036e4:	79bb      	ldrb	r3, [r7, #6]
 80036e6:	757b      	strb	r3, [r7, #21]

    // Ensure at least one dummy clock and CS high before command
    CS_HIGH();
 80036e8:	f7ff ffaa 	bl	8003640 <CS_HIGH>
    HAL_SPI_Transmit(&hspi1, &dummy, 1, HAL_MAX_DELAY);
 80036ec:	f107 010e 	add.w	r1, r7, #14
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	2201      	movs	r2, #1
 80036f6:	481b      	ldr	r0, [pc, #108]	@ (8003764 <SD_SendCommand+0xc0>)
 80036f8:	f7fe fbc2 	bl	8001e80 <HAL_SPI_Transmit>

    // Pull CS low to select the card
    CS_LOW();
 80036fc:	f7ff ff94 	bl	8003628 <CS_LOW>

    // Send command
    for (int i = 0; i < 6; i++) {
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e00c      	b.n	8003720 <SD_SendCommand+0x7c>
        HAL_SPI_Transmit(&hspi1, &buf[i], 1, HAL_MAX_DELAY);
 8003706:	f107 0210 	add.w	r2, r7, #16
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	18d1      	adds	r1, r2, r3
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	2201      	movs	r2, #1
 8003714:	4813      	ldr	r0, [pc, #76]	@ (8003764 <SD_SendCommand+0xc0>)
 8003716:	f7fe fbb3 	bl	8001e80 <HAL_SPI_Transmit>
    for (int i = 0; i < 6; i++) {
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3301      	adds	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	2b05      	cmp	r3, #5
 8003724:	ddef      	ble.n	8003706 <SD_SendCommand+0x62>
    }

    // Wait for response (up to 8 bytes), as per SD spec
    for (int i = 0; i < 8; i++) {
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e011      	b.n	8003750 <SD_SendCommand+0xac>
        HAL_SPI_TransmitReceive(&hspi1, &dummy, &response, 1, HAL_MAX_DELAY);
 800372c:	f107 020f 	add.w	r2, r7, #15
 8003730:	f107 010e 	add.w	r1, r7, #14
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2301      	movs	r3, #1
 800373c:	4809      	ldr	r0, [pc, #36]	@ (8003764 <SD_SendCommand+0xc0>)
 800373e:	f7fe fdfc 	bl	800233a <HAL_SPI_TransmitReceive>
        if ((response & 0x80) == 0) {
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	b25b      	sxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	da06      	bge.n	8003758 <SD_SendCommand+0xb4>
    for (int i = 0; i < 8; i++) {
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	3301      	adds	r3, #1
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b07      	cmp	r3, #7
 8003754:	ddea      	ble.n	800372c <SD_SendCommand+0x88>
 8003756:	e000      	b.n	800375a <SD_SendCommand+0xb6>
            break;  // Valid response received
 8003758:	bf00      	nop
        }
    }


    return response;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200002e4 	.word	0x200002e4

08003768 <SD_SPI_Init>:

DSTATUS SD_SPI_Init(void) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	@ 0x28
 800376c:	af02      	add	r7, sp, #8
    BYTE response;
    BYTE dummy = 0xFF;
 800376e:	23ff      	movs	r3, #255	@ 0xff
 8003770:	71fb      	strb	r3, [r7, #7]
    BYTE ocr[4];

    FCLK_SLOW();
 8003772:	4b59      	ldr	r3, [pc, #356]	@ (80038d8 <SD_SPI_Init+0x170>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800377c:	4b56      	ldr	r3, [pc, #344]	@ (80038d8 <SD_SPI_Init+0x170>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8003784:	601a      	str	r2, [r3, #0]
    CS_HIGH();
 8003786:	f7ff ff5b 	bl	8003640 <CS_HIGH>
    for (int i = 0; i < 10; i++) {
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e009      	b.n	80037a4 <SD_SPI_Init+0x3c>
        HAL_SPI_Transmit(&hspi1, &dummy, 1, HAL_MAX_DELAY); // Send 80 dummy clocks
 8003790:	1df9      	adds	r1, r7, #7
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	2201      	movs	r2, #1
 8003798:	484f      	ldr	r0, [pc, #316]	@ (80038d8 <SD_SPI_Init+0x170>)
 800379a:	f7fe fb71 	bl	8001e80 <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++) {
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	ddf2      	ble.n	8003790 <SD_SPI_Init+0x28>
    }

    // CMD0: Go to idle state
    uint32_t timeout = HAL_GetTick();
 80037aa:	f7fd fb63 	bl	8000e74 <HAL_GetTick>
 80037ae:	60f8      	str	r0, [r7, #12]
	do
	{
		response = SD_SendCommand(CMD0, 0, 0x95);
 80037b0:	2295      	movs	r2, #149	@ 0x95
 80037b2:	2100      	movs	r1, #0
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7ff ff75 	bl	80036a4 <SD_SendCommand>
 80037ba:	4603      	mov	r3, r0
 80037bc:	77fb      	strb	r3, [r7, #31]

	} while( (response != 0x01) && (HAL_GetTick() - timeout < 1000));
 80037be:	7ffb      	ldrb	r3, [r7, #31]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d007      	beq.n	80037d4 <SD_SPI_Init+0x6c>
 80037c4:	f7fd fb56 	bl	8000e74 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037d2:	d3ed      	bcc.n	80037b0 <SD_SPI_Init+0x48>

    if (response != 0x01) return STA_NOINIT;
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <SD_SPI_Init+0x76>
 80037da:	2301      	movs	r3, #1
 80037dc:	e077      	b.n	80038ce <SD_SPI_Init+0x166>

    // CMD8: Send Interface Condition
    response = SD_SendCommand(CMD8, 0x1AA, 0x87);
 80037de:	2287      	movs	r2, #135	@ 0x87
 80037e0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80037e4:	2008      	movs	r0, #8
 80037e6:	f7ff ff5d 	bl	80036a4 <SD_SendCommand>
 80037ea:	4603      	mov	r3, r0
 80037ec:	77fb      	strb	r3, [r7, #31]
    if (response != 0x01) return STA_NOINIT;
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d001      	beq.n	80037f8 <SD_SPI_Init+0x90>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e06a      	b.n	80038ce <SD_SPI_Init+0x166>

    // Read R7 response (4 bytes)
    for (int i = 0; i < 4; i++) {
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e00d      	b.n	800381a <SD_SPI_Init+0xb2>
        HAL_SPI_TransmitReceive(&hspi1, &dummy, &ocr[i], 1, HAL_MAX_DELAY);
 80037fe:	463a      	mov	r2, r7
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	441a      	add	r2, r3
 8003804:	1df9      	adds	r1, r7, #7
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2301      	movs	r3, #1
 800380e:	4832      	ldr	r0, [pc, #200]	@ (80038d8 <SD_SPI_Init+0x170>)
 8003810:	f7fe fd93 	bl	800233a <HAL_SPI_TransmitReceive>
    for (int i = 0; i < 4; i++) {
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3301      	adds	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b03      	cmp	r3, #3
 800381e:	ddee      	ble.n	80037fe <SD_SPI_Init+0x96>
    }

    if (ocr[2] != 0x01 || ocr[3] != 0xAA) return STA_NOINIT;
 8003820:	78bb      	ldrb	r3, [r7, #2]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <SD_SPI_Init+0xc4>
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	2baa      	cmp	r3, #170	@ 0xaa
 800382a:	d001      	beq.n	8003830 <SD_SPI_Init+0xc8>
 800382c:	2301      	movs	r3, #1
 800382e:	e04e      	b.n	80038ce <SD_SPI_Init+0x166>

    // ACMD41: Initialize card
    for (uint32_t start = HAL_GetTick(); HAL_GetTick() - start < 1000;) {
 8003830:	f7fd fb20 	bl	8000e74 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]
 8003836:	e00f      	b.n	8003858 <SD_SPI_Init+0xf0>
        SD_SendCommand(CMD55, 0, 0x01);
 8003838:	2201      	movs	r2, #1
 800383a:	2100      	movs	r1, #0
 800383c:	2037      	movs	r0, #55	@ 0x37
 800383e:	f7ff ff31 	bl	80036a4 <SD_SendCommand>
        response = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 8003842:	2201      	movs	r2, #1
 8003844:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003848:	2029      	movs	r0, #41	@ 0x29
 800384a:	f7ff ff2b 	bl	80036a4 <SD_SendCommand>
 800384e:	4603      	mov	r3, r0
 8003850:	77fb      	strb	r3, [r7, #31]
        if (response == 0x00) break;
 8003852:	7ffb      	ldrb	r3, [r7, #31]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <SD_SPI_Init+0x102>
    for (uint32_t start = HAL_GetTick(); HAL_GetTick() - start < 1000;) {
 8003858:	f7fd fb0c 	bl	8000e74 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003866:	d3e7      	bcc.n	8003838 <SD_SPI_Init+0xd0>
 8003868:	e000      	b.n	800386c <SD_SPI_Init+0x104>
        if (response == 0x00) break;
 800386a:	bf00      	nop
    }
    if (response != 0x00) return STA_NOINIT;
 800386c:	7ffb      	ldrb	r3, [r7, #31]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <SD_SPI_Init+0x10e>
 8003872:	2301      	movs	r3, #1
 8003874:	e02b      	b.n	80038ce <SD_SPI_Init+0x166>

    // CMD58: Read OCR
    response = SD_SendCommand(CMD58, 0, 0x01);
 8003876:	2201      	movs	r2, #1
 8003878:	2100      	movs	r1, #0
 800387a:	203a      	movs	r0, #58	@ 0x3a
 800387c:	f7ff ff12 	bl	80036a4 <SD_SendCommand>
 8003880:	4603      	mov	r3, r0
 8003882:	77fb      	strb	r3, [r7, #31]
    if (response != 0x00) return STA_NOINIT;
 8003884:	7ffb      	ldrb	r3, [r7, #31]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <SD_SPI_Init+0x126>
 800388a:	2301      	movs	r3, #1
 800388c:	e01f      	b.n	80038ce <SD_SPI_Init+0x166>
    for (int i = 0; i < 4; i++) {
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e00c      	b.n	80038ae <SD_SPI_Init+0x146>
        HAL_SPI_TransmitReceive(&hspi1, &dummy, &ocr[i], 1, 50);
 8003894:	463a      	mov	r2, r7
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	441a      	add	r2, r3
 800389a:	1df9      	adds	r1, r7, #7
 800389c:	2332      	movs	r3, #50	@ 0x32
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2301      	movs	r3, #1
 80038a2:	480d      	ldr	r0, [pc, #52]	@ (80038d8 <SD_SPI_Init+0x170>)
 80038a4:	f7fe fd49 	bl	800233a <HAL_SPI_TransmitReceive>
    for (int i = 0; i < 4; i++) {
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	3301      	adds	r3, #1
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	ddef      	ble.n	8003894 <SD_SPI_Init+0x12c>
    }

    // Card is now initialized
    FCLK_FAST();
 80038b4:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <SD_SPI_Init+0x170>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80038be:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <SD_SPI_Init+0x170>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0210 	orr.w	r2, r2, #16
 80038c6:	601a      	str	r2, [r3, #0]
    CS_HIGH();
 80038c8:	f7ff feba 	bl	8003640 <CS_HIGH>

    return RES_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200002e4 	.word	0x200002e4

080038dc <SD_SPI_ReadBlocks>:

DRESULT SD_SPI_ReadBlocks(BYTE *buff, uint32_t sector, uint32_t count)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
    if (count == 0) return RES_ERROR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <SD_SPI_ReadBlocks+0x16>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e04d      	b.n	800398e <SD_SPI_ReadBlocks+0xb2>

    for (uint32_t i = 0; i < count; i++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e039      	b.n	800396c <SD_SPI_ReadBlocks+0x90>
        if (SD_SendCommand(CMD17, sector + i, 0xFF) != 0x00) return RES_ERROR;
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	22ff      	movs	r2, #255	@ 0xff
 8003900:	4619      	mov	r1, r3
 8003902:	2011      	movs	r0, #17
 8003904:	f7ff fece 	bl	80036a4 <SD_SendCommand>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <SD_SPI_ReadBlocks+0x36>
 800390e:	2301      	movs	r3, #1
 8003910:	e03d      	b.n	800398e <SD_SPI_ReadBlocks+0xb2>

        // Wait for 0xFE
        BYTE token;
        for (uint32_t t = 0; t < 100000; t++) {
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	e00d      	b.n	8003934 <SD_SPI_ReadBlocks+0x58>
            HAL_SPI_Receive(&hspi1, &token, 1, HAL_MAX_DELAY);
 8003918:	f107 0116 	add.w	r1, r7, #22
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	2201      	movs	r2, #1
 8003922:	481d      	ldr	r0, [pc, #116]	@ (8003998 <SD_SPI_ReadBlocks+0xbc>)
 8003924:	f7fe fbf0 	bl	8002108 <HAL_SPI_Receive>
            if (token == 0xFE) break;
 8003928:	7dbb      	ldrb	r3, [r7, #22]
 800392a:	2bfe      	cmp	r3, #254	@ 0xfe
 800392c:	d007      	beq.n	800393e <SD_SPI_ReadBlocks+0x62>
        for (uint32_t t = 0; t < 100000; t++) {
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	3301      	adds	r3, #1
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	4a19      	ldr	r2, [pc, #100]	@ (800399c <SD_SPI_ReadBlocks+0xc0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d9ed      	bls.n	8003918 <SD_SPI_ReadBlocks+0x3c>
 800393c:	e000      	b.n	8003940 <SD_SPI_ReadBlocks+0x64>
            if (token == 0xFE) break;
 800393e:	bf00      	nop
        }

        // Read 512 bytes
        HAL_SPI_Receive(&hspi1, &buff[i * 512], 512, HAL_MAX_DELAY);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	025b      	lsls	r3, r3, #9
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	18d1      	adds	r1, r2, r3
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003950:	4811      	ldr	r0, [pc, #68]	@ (8003998 <SD_SPI_ReadBlocks+0xbc>)
 8003952:	f7fe fbd9 	bl	8002108 <HAL_SPI_Receive>

        // Read 2-byte CRC
        BYTE dummy[2];
        HAL_SPI_Receive(&hspi1, dummy, 2, HAL_MAX_DELAY);
 8003956:	f107 0114 	add.w	r1, r7, #20
 800395a:	f04f 33ff 	mov.w	r3, #4294967295
 800395e:	2202      	movs	r2, #2
 8003960:	480d      	ldr	r0, [pc, #52]	@ (8003998 <SD_SPI_ReadBlocks+0xbc>)
 8003962:	f7fe fbd1 	bl	8002108 <HAL_SPI_Receive>
    for (uint32_t i = 0; i < count; i++) {
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3301      	adds	r3, #1
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	d3c1      	bcc.n	80038f8 <SD_SPI_ReadBlocks+0x1c>
    }

    BYTE dummy = 0xFF;
 8003974:	23ff      	movs	r3, #255	@ 0xff
 8003976:	75fb      	strb	r3, [r7, #23]
    CS_HIGH();
 8003978:	f7ff fe62 	bl	8003640 <CS_HIGH>
    HAL_SPI_Transmit(&hspi1, &dummy, 1, HAL_MAX_DELAY);
 800397c:	f107 0117 	add.w	r1, r7, #23
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
 8003984:	2201      	movs	r2, #1
 8003986:	4804      	ldr	r0, [pc, #16]	@ (8003998 <SD_SPI_ReadBlocks+0xbc>)
 8003988:	f7fe fa7a 	bl	8001e80 <HAL_SPI_Transmit>

    return RES_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200002e4 	.word	0x200002e4
 800399c:	0001869f 	.word	0x0001869f

080039a0 <SD_SPI_WriteBlocks>:

DRESULT SD_SPI_WriteBlocks(const BYTE *buff, uint32_t sector, uint32_t count)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
	BYTE token;
	if (count == 0) return RES_PARERR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <SD_SPI_WriteBlocks+0x16>
 80039b2:	2304      	movs	r3, #4
 80039b4:	e0ab      	b.n	8003b0e <SD_SPI_WriteBlocks+0x16e>
	if (count == 1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d135      	bne.n	8003a28 <SD_SPI_WriteBlocks+0x88>
	{
		token = 0xFE;
 80039bc:	23fe      	movs	r3, #254	@ 0xfe
 80039be:	76fb      	strb	r3, [r7, #27]
		if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) return RES_ERROR;
 80039c0:	22ff      	movs	r2, #255	@ 0xff
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	2018      	movs	r0, #24
 80039c6:	f7ff fe6d 	bl	80036a4 <SD_SendCommand>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <SD_SPI_WriteBlocks+0x34>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e09c      	b.n	8003b0e <SD_SPI_WriteBlocks+0x16e>

		HAL_SPI_Transmit(&hspi1, &token, 1, HAL_MAX_DELAY);
 80039d4:	f107 011b 	add.w	r1, r7, #27
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	2201      	movs	r2, #1
 80039de:	484e      	ldr	r0, [pc, #312]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 80039e0:	f7fe fa4e 	bl	8001e80 <HAL_SPI_Transmit>

		// Send 512-byte data block
		HAL_SPI_Transmit(&hspi1, buff, 512, HAL_MAX_DELAY);
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	484a      	ldr	r0, [pc, #296]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 80039f0:	f7fe fa46 	bl	8001e80 <HAL_SPI_Transmit>

		// Dummy CRC
		BYTE crc[2] = {0xFF, 0xFF};
 80039f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039f8:	833b      	strh	r3, [r7, #24]
		HAL_SPI_Transmit(&hspi1, crc, 2, HAL_MAX_DELAY);
 80039fa:	f107 0118 	add.w	r1, r7, #24
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	2202      	movs	r2, #2
 8003a04:	4844      	ldr	r0, [pc, #272]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 8003a06:	f7fe fa3b 	bl	8001e80 <HAL_SPI_Transmit>

		// Check data response
		BYTE resp;
		HAL_SPI_Receive(&hspi1, &resp, 1, HAL_MAX_DELAY);
 8003a0a:	f107 0117 	add.w	r1, r7, #23
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a12:	2201      	movs	r2, #1
 8003a14:	4840      	ldr	r0, [pc, #256]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 8003a16:	f7fe fb77 	bl	8002108 <HAL_SPI_Receive>
		if ((resp & 0x1F) != 0x05) return RES_ERROR;
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d065      	beq.n	8003af0 <SD_SPI_WriteBlocks+0x150>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e072      	b.n	8003b0e <SD_SPI_WriteBlocks+0x16e>
	}
	else
	{
		token = 0xFC;
 8003a28:	23fc      	movs	r3, #252	@ 0xfc
 8003a2a:	76fb      	strb	r3, [r7, #27]
		for (uint32_t i = 0; i < count; i++) {
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e046      	b.n	8003ac0 <SD_SPI_WriteBlocks+0x120>

			SD_SendCommand(CMD55, 0, 0x01);
 8003a32:	2201      	movs	r2, #1
 8003a34:	2100      	movs	r1, #0
 8003a36:	2037      	movs	r0, #55	@ 0x37
 8003a38:	f7ff fe34 	bl	80036a4 <SD_SendCommand>
			SD_SendCommand(ACMD23, count, 0xFF);
 8003a3c:	22ff      	movs	r2, #255	@ 0xff
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	2017      	movs	r0, #23
 8003a42:	f7ff fe2f 	bl	80036a4 <SD_SendCommand>

			if (SD_SendCommand(CMD25, sector + i, 0xFF) != 0x00) return RES_ERROR;
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	22ff      	movs	r2, #255	@ 0xff
 8003a4e:	4619      	mov	r1, r3
 8003a50:	2019      	movs	r0, #25
 8003a52:	f7ff fe27 	bl	80036a4 <SD_SendCommand>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <SD_SPI_WriteBlocks+0xc0>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e056      	b.n	8003b0e <SD_SPI_WriteBlocks+0x16e>

			HAL_SPI_Transmit(&hspi1, &token, 1, HAL_MAX_DELAY);
 8003a60:	f107 011b 	add.w	r1, r7, #27
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	2201      	movs	r2, #1
 8003a6a:	482b      	ldr	r0, [pc, #172]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 8003a6c:	f7fe fa08 	bl	8001e80 <HAL_SPI_Transmit>

			// Send 512-byte data block
			HAL_SPI_Transmit(&hspi1, (BYTE*)&buff[i * 512], 512, HAL_MAX_DELAY);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	18d1      	adds	r1, r2, r3
 8003a78:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a80:	4825      	ldr	r0, [pc, #148]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 8003a82:	f7fe f9fd 	bl	8001e80 <HAL_SPI_Transmit>

			// Dummy CRC
			BYTE crc[2] = {0xFF, 0xFF};
 8003a86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a8a:	82bb      	strh	r3, [r7, #20]
			HAL_SPI_Transmit(&hspi1, crc, 2, HAL_MAX_DELAY);
 8003a8c:	f107 0114 	add.w	r1, r7, #20
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
 8003a94:	2202      	movs	r2, #2
 8003a96:	4820      	ldr	r0, [pc, #128]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 8003a98:	f7fe f9f2 	bl	8001e80 <HAL_SPI_Transmit>

			// Check data response
			BYTE resp;
			HAL_SPI_Receive(&hspi1, &resp, 1, HAL_MAX_DELAY);
 8003a9c:	f107 0113 	add.w	r1, r7, #19
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	481c      	ldr	r0, [pc, #112]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 8003aa8:	f7fe fb2e 	bl	8002108 <HAL_SPI_Receive>
			if ((resp & 0x1F) != 0x05) return RES_ERROR;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d001      	beq.n	8003aba <SD_SPI_WriteBlocks+0x11a>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e029      	b.n	8003b0e <SD_SPI_WriteBlocks+0x16e>
		for (uint32_t i = 0; i < count; i++) {
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d3b4      	bcc.n	8003a32 <SD_SPI_WriteBlocks+0x92>
		}
		token = 0xFD;
 8003ac8:	23fd      	movs	r3, #253	@ 0xfd
 8003aca:	76fb      	strb	r3, [r7, #27]
		HAL_SPI_Transmit(&hspi1, &token, 1, HAL_MAX_DELAY);
 8003acc:	f107 011b 	add.w	r1, r7, #27
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4810      	ldr	r0, [pc, #64]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 8003ad8:	f7fe f9d2 	bl	8001e80 <HAL_SPI_Transmit>
		if (SD_SPI_Sync() == false) return RES_ERROR;
 8003adc:	f7ff fdbc 	bl	8003658 <SD_SPI_Sync>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f083 0301 	eor.w	r3, r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <SD_SPI_WriteBlocks+0x150>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e00e      	b.n	8003b0e <SD_SPI_WriteBlocks+0x16e>
	}


    BYTE dummy = 0xFF;
 8003af0:	23ff      	movs	r3, #255	@ 0xff
 8003af2:	76bb      	strb	r3, [r7, #26]
    SD_SPI_Sync();
 8003af4:	f7ff fdb0 	bl	8003658 <SD_SPI_Sync>
    CS_HIGH();
 8003af8:	f7ff fda2 	bl	8003640 <CS_HIGH>
    HAL_SPI_Transmit(&hspi1, &dummy, 1, HAL_MAX_DELAY);
 8003afc:	f107 011a 	add.w	r1, r7, #26
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	2201      	movs	r2, #1
 8003b06:	4804      	ldr	r0, [pc, #16]	@ (8003b18 <SD_SPI_WriteBlocks+0x178>)
 8003b08:	f7fe f9ba 	bl	8001e80 <HAL_SPI_Transmit>

	return RES_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200002e4 	.word	0x200002e4

08003b1c <SD_SPI_IsInserted>:

DRESULT SD_SPI_IsInserted(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
	return RES_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <SD_SPI_ioctl>:

DRESULT SD_SPI_ioctl(uint8_t pdrv, uint8_t cmd, void *buff)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	603a      	str	r2, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	switch(cmd)
 8003b3c:	79bb      	ldrb	r3, [r7, #6]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d107      	bne.n	8003b52 <SD_SPI_ioctl+0x26>
	{
	case CTRL_SYNC : /* Wait for internal operations to be done */
		res = SD_SPI_Sync() ? RES_OK:RES_ERROR;
 8003b42:	f7ff fd89 	bl	8003658 <SD_SPI_Sync>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f083 0301 	eor.w	r3, r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	73fb      	strb	r3, [r7, #15]
		break;
 8003b50:	e002      	b.n	8003b58 <SD_SPI_ioctl+0x2c>
	default:
		res = RES_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
		break;
 8003b56:	bf00      	nop
	}

    BYTE dummy = 0xFF;
 8003b58:	23ff      	movs	r3, #255	@ 0xff
 8003b5a:	73bb      	strb	r3, [r7, #14]
    CS_HIGH();
 8003b5c:	f7ff fd70 	bl	8003640 <CS_HIGH>
    HAL_SPI_Transmit(&hspi1, &dummy, 1, HAL_MAX_DELAY);
 8003b60:	f107 010e 	add.w	r1, r7, #14
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4804      	ldr	r0, [pc, #16]	@ (8003b7c <SD_SPI_ioctl+0x50>)
 8003b6c:	f7fe f988 	bl	8001e80 <HAL_SPI_Transmit>

	return res;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200002e4 	.word	0x200002e4

08003b80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_SPI_Init();
 8003b8a:	f7ff fded 	bl	8003768 <SD_SPI_Init>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b04      	ldr	r3, [pc, #16]	@ (8003ba4 <USER_initialize+0x24>)
 8003b94:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003b96:	4b03      	ldr	r3, [pc, #12]	@ (8003ba4 <USER_initialize+0x24>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000009 	.word	0x20000009

08003ba8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = SD_SPI_IsInserted();
 8003bb2:	f7ff ffb3 	bl	8003b1c <SD_SPI_IsInserted>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <USER_status+0x24>)
 8003bbc:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003bbe:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <USER_status+0x24>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000009 	.word	0x20000009

08003bd0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4603      	mov	r3, r0
 8003bde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_SPI_ReadBlocks(buff, sector, count);
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	68b8      	ldr	r0, [r7, #8]
 8003be6:	f7ff fe79 	bl	80038dc <SD_SPI_ReadBlocks>
 8003bea:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_SPI_WriteBlocks(buff, sector, count);
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	68b8      	ldr	r0, [r7, #8]
 8003c0a:	f7ff fec9 	bl	80039a0 <SD_SPI_WriteBlocks>
 8003c0e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	603a      	str	r2, [r7, #0]
 8003c22:	71fb      	strb	r3, [r7, #7]
 8003c24:	460b      	mov	r3, r1
 8003c26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_SPI_ioctl(pdrv, cmd, buff);
 8003c28:	79b9      	ldrb	r1, [r7, #6]
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ff7c 	bl	8003b2c <SD_SPI_ioctl>
 8003c34:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003c56:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c58:	7a5b      	ldrb	r3, [r3, #9]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d131      	bne.n	8003cc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003c60:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c62:	7a5b      	ldrb	r3, [r3, #9]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c70:	7a5b      	ldrb	r3, [r3, #9]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4a17      	ldr	r2, [pc, #92]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8003c7e:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c80:	7a5b      	ldrb	r3, [r3, #9]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b13      	ldr	r3, [pc, #76]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	79fa      	ldrb	r2, [r7, #7]
 8003c8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003c8e:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c90:	7a5b      	ldrb	r3, [r3, #9]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	b2d1      	uxtb	r1, r2
 8003c98:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd4 <FATFS_LinkDriverEx+0x94>)
 8003c9a:	7251      	strb	r1, [r2, #9]
 8003c9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003c9e:	7dbb      	ldrb	r3, [r7, #22]
 8003ca0:	3330      	adds	r3, #48	@ 0x30
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	3301      	adds	r3, #1
 8003cac:	223a      	movs	r2, #58	@ 0x3a
 8003cae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	222f      	movs	r2, #47	@ 0x2f
 8003cb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3303      	adds	r3, #3
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200004f4 	.word	0x200004f4

08003cd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	6839      	ldr	r1, [r7, #0]
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffaa 	bl	8003c40 <FATFS_LinkDriverEx>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d08:	2b84      	cmp	r3, #132	@ 0x84
 8003d0a:	d005      	beq.n	8003d18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	3303      	adds	r3, #3
 8003d16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d2a:	f000 fae5 	bl	80042f8 <vTaskStartScheduler>
  
  return osOK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d36:	b089      	sub	sp, #36	@ 0x24
 8003d38:	af04      	add	r7, sp, #16
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d020      	beq.n	8003d88 <osThreadCreate+0x54>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01c      	beq.n	8003d88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685c      	ldr	r4, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691e      	ldr	r6, [r3, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ffc8 	bl	8003cf6 <makeFreeRtosPriority>
 8003d66:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d70:	9202      	str	r2, [sp, #8]
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	9100      	str	r1, [sp, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	4632      	mov	r2, r6
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f000 f8ed 	bl	8003f5c <xTaskCreateStatic>
 8003d82:	4603      	mov	r3, r0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e01c      	b.n	8003dc2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685c      	ldr	r4, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d94:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ffaa 	bl	8003cf6 <makeFreeRtosPriority>
 8003da2:	4602      	mov	r2, r0
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	9200      	str	r2, [sp, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4632      	mov	r2, r6
 8003db0:	4629      	mov	r1, r5
 8003db2:	4620      	mov	r0, r4
 8003db4:	f000 f932 	bl	800401c <xTaskCreate>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dcc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <osDelay+0x16>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	e000      	b.n	8003de4 <osDelay+0x18>
 8003de2:	2301      	movs	r3, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fa51 	bl	800428c <vTaskDelay>
  
  return osOK;
 8003dea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f103 0208 	add.w	r2, r3, #8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f103 0208 	add.w	r2, r3, #8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f103 0208 	add.w	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d103      	bne.n	8003eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e00c      	b.n	8003ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	e002      	b.n	8003ec4 <vListInsert+0x2e>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d2f6      	bcs.n	8003ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	601a      	str	r2, [r3, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6892      	ldr	r2, [r2, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6852      	ldr	r2, [r2, #4]
 8003f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d103      	bne.n	8003f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1e5a      	subs	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	@ 0x38
 8003f60:	af04      	add	r7, sp, #16
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	e7fd      	b.n	8003f84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	61fb      	str	r3, [r7, #28]
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fa6:	2354      	movs	r3, #84	@ 0x54
 8003fa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b54      	cmp	r3, #84	@ 0x54
 8003fae:	d00b      	beq.n	8003fc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	61bb      	str	r3, [r7, #24]
}
 8003fc2:	bf00      	nop
 8003fc4:	bf00      	nop
 8003fc6:	e7fd      	b.n	8003fc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01e      	beq.n	800400e <xTaskCreateStatic+0xb2>
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01b      	beq.n	800400e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9303      	str	r3, [sp, #12]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	9302      	str	r3, [sp, #8]
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f850 	bl	80040a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004006:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004008:	f000 f8d6 	bl	80041b8 <prvAddNewTaskToReadyList>
 800400c:	e001      	b.n	8004012 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004012:	697b      	ldr	r3, [r7, #20]
	}
 8004014:	4618      	mov	r0, r3
 8004016:	3728      	adds	r7, #40	@ 0x28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08c      	sub	sp, #48	@ 0x30
 8004020:	af04      	add	r7, sp, #16
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fed1 	bl	8004dd8 <pvPortMalloc>
 8004036:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00e      	beq.n	800405c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800403e:	2054      	movs	r0, #84	@ 0x54
 8004040:	f000 feca 	bl	8004dd8 <pvPortMalloc>
 8004044:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	631a      	str	r2, [r3, #48]	@ 0x30
 8004052:	e005      	b.n	8004060 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004054:	6978      	ldr	r0, [r7, #20]
 8004056:	f000 ff8d 	bl	8004f74 <vPortFree>
 800405a:	e001      	b.n	8004060 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d017      	beq.n	8004096 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	2300      	movs	r3, #0
 8004072:	9303      	str	r3, [sp, #12]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	9302      	str	r3, [sp, #8]
 8004078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f80e 	bl	80040a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800408a:	69f8      	ldr	r0, [r7, #28]
 800408c:	f000 f894 	bl	80041b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e002      	b.n	800409c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800409c:	69bb      	ldr	r3, [r7, #24]
	}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b088      	sub	sp, #32
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040be:	3b01      	subs	r3, #1
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f023 0307 	bic.w	r3, r3, #7
 80040cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	617b      	str	r3, [r7, #20]
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01f      	beq.n	8004136 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	e012      	b.n	8004122 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	7819      	ldrb	r1, [r3, #0]
 8004104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	3334      	adds	r3, #52	@ 0x34
 800410c:	460a      	mov	r2, r1
 800410e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d9e9      	bls.n	80040fc <prvInitialiseNewTask+0x56>
 8004128:	e000      	b.n	800412c <prvInitialiseNewTask+0x86>
			{
				break;
 800412a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004134:	e003      	b.n	800413e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	2b06      	cmp	r3, #6
 8004142:	d901      	bls.n	8004148 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004144:	2306      	movs	r3, #6
 8004146:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800414c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004152:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800415a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415c:	3304      	adds	r3, #4
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fe68 	bl	8003e34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	3318      	adds	r3, #24
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fe63 	bl	8003e34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800416e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	f1c3 0207 	rsb	r2, r3, #7
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	2200      	movs	r2, #0
 8004188:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	69b8      	ldr	r0, [r7, #24]
 8004198:	f000 fc0e 	bl	80049b8 <pxPortInitialiseStack>
 800419c:	4602      	mov	r2, r0
 800419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ae:	bf00      	nop
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041c0:	f000 fd2a 	bl	8004c18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <prvAddNewTaskToReadyList+0xb8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	4a29      	ldr	r2, [pc, #164]	@ (8004270 <prvAddNewTaskToReadyList+0xb8>)
 80041cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041ce:	4b29      	ldr	r3, [pc, #164]	@ (8004274 <prvAddNewTaskToReadyList+0xbc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041d6:	4a27      	ldr	r2, [pc, #156]	@ (8004274 <prvAddNewTaskToReadyList+0xbc>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041dc:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <prvAddNewTaskToReadyList+0xb8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d110      	bne.n	8004206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041e4:	f000 fac4 	bl	8004770 <prvInitialiseTaskLists>
 80041e8:	e00d      	b.n	8004206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041ea:	4b23      	ldr	r3, [pc, #140]	@ (8004278 <prvAddNewTaskToReadyList+0xc0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041f2:	4b20      	ldr	r3, [pc, #128]	@ (8004274 <prvAddNewTaskToReadyList+0xbc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d802      	bhi.n	8004206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004200:	4a1c      	ldr	r2, [pc, #112]	@ (8004274 <prvAddNewTaskToReadyList+0xbc>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004206:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <prvAddNewTaskToReadyList+0xc4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <prvAddNewTaskToReadyList+0xc4>)
 800420e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	2201      	movs	r2, #1
 8004216:	409a      	lsls	r2, r3
 8004218:	4b19      	ldr	r3, [pc, #100]	@ (8004280 <prvAddNewTaskToReadyList+0xc8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4313      	orrs	r3, r2
 800421e:	4a18      	ldr	r2, [pc, #96]	@ (8004280 <prvAddNewTaskToReadyList+0xc8>)
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <prvAddNewTaskToReadyList+0xcc>)
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f7ff fe08 	bl	8003e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800423e:	f000 fd1d 	bl	8004c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004242:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <prvAddNewTaskToReadyList+0xc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00e      	beq.n	8004268 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800424a:	4b0a      	ldr	r3, [pc, #40]	@ (8004274 <prvAddNewTaskToReadyList+0xbc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	429a      	cmp	r2, r3
 8004256:	d207      	bcs.n	8004268 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004258:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <prvAddNewTaskToReadyList+0xd0>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000600 	.word	0x20000600
 8004274:	20000500 	.word	0x20000500
 8004278:	2000060c 	.word	0x2000060c
 800427c:	2000061c 	.word	0x2000061c
 8004280:	20000608 	.word	0x20000608
 8004284:	20000504 	.word	0x20000504
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d018      	beq.n	80042d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800429e:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <vTaskDelay+0x64>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <vTaskDelay+0x32>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60bb      	str	r3, [r7, #8]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042be:	f000 f87d 	bl	80043bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042c2:	2100      	movs	r1, #0
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb11 	bl	80048ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042ca:	f000 f885 	bl	80043d8 <xTaskResumeAll>
 80042ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80042d6:	4b07      	ldr	r3, [pc, #28]	@ (80042f4 <vTaskDelay+0x68>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000628 	.word	0x20000628
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	@ 0x28
 80042fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004306:	463a      	mov	r2, r7
 8004308:	1d39      	adds	r1, r7, #4
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	4618      	mov	r0, r3
 8004310:	f7fc f954 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	9202      	str	r2, [sp, #8]
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	2300      	movs	r3, #0
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	460a      	mov	r2, r1
 8004326:	491f      	ldr	r1, [pc, #124]	@ (80043a4 <vTaskStartScheduler+0xac>)
 8004328:	481f      	ldr	r0, [pc, #124]	@ (80043a8 <vTaskStartScheduler+0xb0>)
 800432a:	f7ff fe17 	bl	8003f5c <xTaskCreateStatic>
 800432e:	4603      	mov	r3, r0
 8004330:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <vTaskStartScheduler+0xb4>)
 8004332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004334:	4b1d      	ldr	r3, [pc, #116]	@ (80043ac <vTaskStartScheduler+0xb4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e001      	b.n	8004346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d116      	bne.n	800437a <vTaskStartScheduler+0x82>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	613b      	str	r3, [r7, #16]
}
 800435e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004360:	4b13      	ldr	r3, [pc, #76]	@ (80043b0 <vTaskStartScheduler+0xb8>)
 8004362:	f04f 32ff 	mov.w	r2, #4294967295
 8004366:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004368:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <vTaskStartScheduler+0xbc>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <vTaskStartScheduler+0xc0>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004374:	f000 fbac 	bl	8004ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004378:	e00f      	b.n	800439a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d10b      	bne.n	800439a <vTaskStartScheduler+0xa2>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	60fb      	str	r3, [r7, #12]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <vTaskStartScheduler+0x9e>
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	08005c4c 	.word	0x08005c4c
 80043a8:	08004741 	.word	0x08004741
 80043ac:	20000624 	.word	0x20000624
 80043b0:	20000620 	.word	0x20000620
 80043b4:	2000060c 	.word	0x2000060c
 80043b8:	20000604 	.word	0x20000604

080043bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043c0:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <vTaskSuspendAll+0x18>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a03      	ldr	r2, [pc, #12]	@ (80043d4 <vTaskSuspendAll+0x18>)
 80043c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	20000628 	.word	0x20000628

080043d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043e6:	4b42      	ldr	r3, [pc, #264]	@ (80044f0 <xTaskResumeAll+0x118>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <xTaskResumeAll+0x2e>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	603b      	str	r3, [r7, #0]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004406:	f000 fc07 	bl	8004c18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800440a:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <xTaskResumeAll+0x118>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3b01      	subs	r3, #1
 8004410:	4a37      	ldr	r2, [pc, #220]	@ (80044f0 <xTaskResumeAll+0x118>)
 8004412:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004414:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <xTaskResumeAll+0x118>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d161      	bne.n	80044e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800441c:	4b35      	ldr	r3, [pc, #212]	@ (80044f4 <xTaskResumeAll+0x11c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05d      	beq.n	80044e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004424:	e02e      	b.n	8004484 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b34      	ldr	r3, [pc, #208]	@ (80044f8 <xTaskResumeAll+0x120>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3318      	adds	r3, #24
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fd68 	bl	8003f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fd63 	bl	8003f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	2201      	movs	r2, #1
 8004448:	409a      	lsls	r2, r3
 800444a:	4b2c      	ldr	r3, [pc, #176]	@ (80044fc <xTaskResumeAll+0x124>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	4a2a      	ldr	r2, [pc, #168]	@ (80044fc <xTaskResumeAll+0x124>)
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <xTaskResumeAll+0x128>)
 8004462:	441a      	add	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f7ff fcef 	bl	8003e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004474:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <xTaskResumeAll+0x12c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800447e:	4b22      	ldr	r3, [pc, #136]	@ (8004508 <xTaskResumeAll+0x130>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004484:	4b1c      	ldr	r3, [pc, #112]	@ (80044f8 <xTaskResumeAll+0x120>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1cc      	bne.n	8004426 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004492:	f000 fa0b 	bl	80048ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004496:	4b1d      	ldr	r3, [pc, #116]	@ (800450c <xTaskResumeAll+0x134>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044a2:	f000 f837 	bl	8004514 <xTaskIncrementTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80044ac:	4b16      	ldr	r3, [pc, #88]	@ (8004508 <xTaskResumeAll+0x130>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f1      	bne.n	80044a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80044be:	4b13      	ldr	r3, [pc, #76]	@ (800450c <xTaskResumeAll+0x134>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044c4:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <xTaskResumeAll+0x130>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <xTaskResumeAll+0x138>)
 80044d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044e0:	f000 fbcc 	bl	8004c7c <vPortExitCritical>

	return xAlreadyYielded;
 80044e4:	68bb      	ldr	r3, [r7, #8]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000628 	.word	0x20000628
 80044f4:	20000600 	.word	0x20000600
 80044f8:	200005c0 	.word	0x200005c0
 80044fc:	20000608 	.word	0x20000608
 8004500:	20000504 	.word	0x20000504
 8004504:	20000500 	.word	0x20000500
 8004508:	20000614 	.word	0x20000614
 800450c:	20000610 	.word	0x20000610
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800451e:	4b4f      	ldr	r3, [pc, #316]	@ (800465c <xTaskIncrementTick+0x148>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 808f 	bne.w	8004646 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004528:	4b4d      	ldr	r3, [pc, #308]	@ (8004660 <xTaskIncrementTick+0x14c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004530:	4a4b      	ldr	r2, [pc, #300]	@ (8004660 <xTaskIncrementTick+0x14c>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d121      	bne.n	8004580 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800453c:	4b49      	ldr	r3, [pc, #292]	@ (8004664 <xTaskIncrementTick+0x150>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	603b      	str	r3, [r7, #0]
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	e7fd      	b.n	800455a <xTaskIncrementTick+0x46>
 800455e:	4b41      	ldr	r3, [pc, #260]	@ (8004664 <xTaskIncrementTick+0x150>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	4b40      	ldr	r3, [pc, #256]	@ (8004668 <xTaskIncrementTick+0x154>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3e      	ldr	r2, [pc, #248]	@ (8004664 <xTaskIncrementTick+0x150>)
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4a3e      	ldr	r2, [pc, #248]	@ (8004668 <xTaskIncrementTick+0x154>)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b3e      	ldr	r3, [pc, #248]	@ (800466c <xTaskIncrementTick+0x158>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3301      	adds	r3, #1
 8004578:	4a3c      	ldr	r2, [pc, #240]	@ (800466c <xTaskIncrementTick+0x158>)
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	f000 f996 	bl	80048ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004580:	4b3b      	ldr	r3, [pc, #236]	@ (8004670 <xTaskIncrementTick+0x15c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	429a      	cmp	r2, r3
 8004588:	d348      	bcc.n	800461c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800458a:	4b36      	ldr	r3, [pc, #216]	@ (8004664 <xTaskIncrementTick+0x150>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004594:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <xTaskIncrementTick+0x15c>)
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	601a      	str	r2, [r3, #0]
					break;
 800459c:	e03e      	b.n	800461c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459e:	4b31      	ldr	r3, [pc, #196]	@ (8004664 <xTaskIncrementTick+0x150>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d203      	bcs.n	80045be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004670 <xTaskIncrementTick+0x15c>)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045bc:	e02e      	b.n	800461c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fca0 	bl	8003f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3318      	adds	r3, #24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fc97 	bl	8003f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	2201      	movs	r2, #1
 80045e0:	409a      	lsls	r2, r3
 80045e2:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <xTaskIncrementTick+0x160>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	4a22      	ldr	r2, [pc, #136]	@ (8004674 <xTaskIncrementTick+0x160>)
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004678 <xTaskIncrementTick+0x164>)
 80045fa:	441a      	add	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7ff fc23 	bl	8003e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460c:	4b1b      	ldr	r3, [pc, #108]	@ (800467c <xTaskIncrementTick+0x168>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	429a      	cmp	r2, r3
 8004614:	d3b9      	bcc.n	800458a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004616:	2301      	movs	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800461a:	e7b6      	b.n	800458a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800461c:	4b17      	ldr	r3, [pc, #92]	@ (800467c <xTaskIncrementTick+0x168>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004622:	4915      	ldr	r1, [pc, #84]	@ (8004678 <xTaskIncrementTick+0x164>)
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d901      	bls.n	8004638 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004638:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <xTaskIncrementTick+0x16c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e004      	b.n	8004650 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004646:	4b0f      	ldr	r3, [pc, #60]	@ (8004684 <xTaskIncrementTick+0x170>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a0d      	ldr	r2, [pc, #52]	@ (8004684 <xTaskIncrementTick+0x170>)
 800464e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004650:	697b      	ldr	r3, [r7, #20]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000628 	.word	0x20000628
 8004660:	20000604 	.word	0x20000604
 8004664:	200005b8 	.word	0x200005b8
 8004668:	200005bc 	.word	0x200005bc
 800466c:	20000618 	.word	0x20000618
 8004670:	20000620 	.word	0x20000620
 8004674:	20000608 	.word	0x20000608
 8004678:	20000504 	.word	0x20000504
 800467c:	20000500 	.word	0x20000500
 8004680:	20000614 	.word	0x20000614
 8004684:	20000610 	.word	0x20000610

08004688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800468e:	4b27      	ldr	r3, [pc, #156]	@ (800472c <vTaskSwitchContext+0xa4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004696:	4b26      	ldr	r3, [pc, #152]	@ (8004730 <vTaskSwitchContext+0xa8>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800469c:	e040      	b.n	8004720 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800469e:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <vTaskSwitchContext+0xa8>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a4:	4b23      	ldr	r3, [pc, #140]	@ (8004734 <vTaskSwitchContext+0xac>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	fab3 f383 	clz	r3, r3
 80046b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046b2:	7afb      	ldrb	r3, [r7, #11]
 80046b4:	f1c3 031f 	rsb	r3, r3, #31
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	491f      	ldr	r1, [pc, #124]	@ (8004738 <vTaskSwitchContext+0xb0>)
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	607b      	str	r3, [r7, #4]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <vTaskSwitchContext+0x5a>
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4a11      	ldr	r2, [pc, #68]	@ (8004738 <vTaskSwitchContext+0xb0>)
 80046f2:	4413      	add	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	605a      	str	r2, [r3, #4]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	3308      	adds	r3, #8
 8004708:	429a      	cmp	r2, r3
 800470a:	d104      	bne.n	8004716 <vTaskSwitchContext+0x8e>
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a07      	ldr	r2, [pc, #28]	@ (800473c <vTaskSwitchContext+0xb4>)
 800471e:	6013      	str	r3, [r2, #0]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000628 	.word	0x20000628
 8004730:	20000614 	.word	0x20000614
 8004734:	20000608 	.word	0x20000608
 8004738:	20000504 	.word	0x20000504
 800473c:	20000500 	.word	0x20000500

08004740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004748:	f000 f852 	bl	80047f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800474c:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <prvIdleTask+0x28>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d9f9      	bls.n	8004748 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004754:	4b05      	ldr	r3, [pc, #20]	@ (800476c <prvIdleTask+0x2c>)
 8004756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004764:	e7f0      	b.n	8004748 <prvIdleTask+0x8>
 8004766:	bf00      	nop
 8004768:	20000504 	.word	0x20000504
 800476c:	e000ed04 	.word	0xe000ed04

08004770 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	e00c      	b.n	8004796 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4a12      	ldr	r2, [pc, #72]	@ (80047d0 <prvInitialiseTaskLists+0x60>)
 8004788:	4413      	add	r3, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fb32 	bl	8003df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3301      	adds	r3, #1
 8004794:	607b      	str	r3, [r7, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b06      	cmp	r3, #6
 800479a:	d9ef      	bls.n	800477c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800479c:	480d      	ldr	r0, [pc, #52]	@ (80047d4 <prvInitialiseTaskLists+0x64>)
 800479e:	f7ff fb29 	bl	8003df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047a2:	480d      	ldr	r0, [pc, #52]	@ (80047d8 <prvInitialiseTaskLists+0x68>)
 80047a4:	f7ff fb26 	bl	8003df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047a8:	480c      	ldr	r0, [pc, #48]	@ (80047dc <prvInitialiseTaskLists+0x6c>)
 80047aa:	f7ff fb23 	bl	8003df4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047ae:	480c      	ldr	r0, [pc, #48]	@ (80047e0 <prvInitialiseTaskLists+0x70>)
 80047b0:	f7ff fb20 	bl	8003df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047b4:	480b      	ldr	r0, [pc, #44]	@ (80047e4 <prvInitialiseTaskLists+0x74>)
 80047b6:	f7ff fb1d 	bl	8003df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <prvInitialiseTaskLists+0x78>)
 80047bc:	4a05      	ldr	r2, [pc, #20]	@ (80047d4 <prvInitialiseTaskLists+0x64>)
 80047be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047c0:	4b0a      	ldr	r3, [pc, #40]	@ (80047ec <prvInitialiseTaskLists+0x7c>)
 80047c2:	4a05      	ldr	r2, [pc, #20]	@ (80047d8 <prvInitialiseTaskLists+0x68>)
 80047c4:	601a      	str	r2, [r3, #0]
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000504 	.word	0x20000504
 80047d4:	20000590 	.word	0x20000590
 80047d8:	200005a4 	.word	0x200005a4
 80047dc:	200005c0 	.word	0x200005c0
 80047e0:	200005d4 	.word	0x200005d4
 80047e4:	200005ec 	.word	0x200005ec
 80047e8:	200005b8 	.word	0x200005b8
 80047ec:	200005bc 	.word	0x200005bc

080047f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047f6:	e019      	b.n	800482c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047f8:	f000 fa0e 	bl	8004c18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047fc:	4b10      	ldr	r3, [pc, #64]	@ (8004840 <prvCheckTasksWaitingTermination+0x50>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fb7d 	bl	8003f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <prvCheckTasksWaitingTermination+0x54>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3b01      	subs	r3, #1
 8004814:	4a0b      	ldr	r2, [pc, #44]	@ (8004844 <prvCheckTasksWaitingTermination+0x54>)
 8004816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <prvCheckTasksWaitingTermination+0x58>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3b01      	subs	r3, #1
 800481e:	4a0a      	ldr	r2, [pc, #40]	@ (8004848 <prvCheckTasksWaitingTermination+0x58>)
 8004820:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004822:	f000 fa2b 	bl	8004c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f810 	bl	800484c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800482c:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <prvCheckTasksWaitingTermination+0x58>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e1      	bne.n	80047f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200005d4 	.word	0x200005d4
 8004844:	20000600 	.word	0x20000600
 8004848:	200005e8 	.word	0x200005e8

0800484c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800485a:	2b00      	cmp	r3, #0
 800485c:	d108      	bne.n	8004870 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fb86 	bl	8004f74 <vPortFree>
				vPortFree( pxTCB );
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fb83 	bl	8004f74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800486e:	e019      	b.n	80048a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004876:	2b01      	cmp	r3, #1
 8004878:	d103      	bne.n	8004882 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fb7a 	bl	8004f74 <vPortFree>
	}
 8004880:	e010      	b.n	80048a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004888:	2b02      	cmp	r3, #2
 800488a:	d00b      	beq.n	80048a4 <prvDeleteTCB+0x58>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	60fb      	str	r3, [r7, #12]
}
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	e7fd      	b.n	80048a0 <prvDeleteTCB+0x54>
	}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b2:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <prvResetNextTaskUnblockTime+0x38>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <prvResetNextTaskUnblockTime+0x3c>)
 80048be:	f04f 32ff 	mov.w	r2, #4294967295
 80048c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048c4:	e008      	b.n	80048d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c6:	4b07      	ldr	r3, [pc, #28]	@ (80048e4 <prvResetNextTaskUnblockTime+0x38>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a04      	ldr	r2, [pc, #16]	@ (80048e8 <prvResetNextTaskUnblockTime+0x3c>)
 80048d6:	6013      	str	r3, [r2, #0]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	200005b8 	.word	0x200005b8
 80048e8:	20000620 	.word	0x20000620

080048ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048f6:	4b29      	ldr	r3, [pc, #164]	@ (800499c <prvAddCurrentTaskToDelayedList+0xb0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fc:	4b28      	ldr	r3, [pc, #160]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fb00 	bl	8003f08 <uxListRemove>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800490e:	4b24      	ldr	r3, [pc, #144]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	2201      	movs	r2, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	4b21      	ldr	r3, [pc, #132]	@ (80049a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4013      	ands	r3, r2
 8004922:	4a20      	ldr	r2, [pc, #128]	@ (80049a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004924:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d10a      	bne.n	8004944 <prvAddCurrentTaskToDelayedList+0x58>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004934:	4b1a      	ldr	r3, [pc, #104]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	481a      	ldr	r0, [pc, #104]	@ (80049a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800493e:	f7ff fa86 	bl	8003e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004942:	e026      	b.n	8004992 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800494c:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	429a      	cmp	r2, r3
 800495a:	d209      	bcs.n	8004970 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800495c:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b0f      	ldr	r3, [pc, #60]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7ff fa94 	bl	8003e96 <vListInsert>
}
 800496e:	e010      	b.n	8004992 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004970:	4b0f      	ldr	r3, [pc, #60]	@ (80049b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3304      	adds	r3, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f7ff fa8a 	bl	8003e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004982:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	429a      	cmp	r2, r3
 800498a:	d202      	bcs.n	8004992 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800498c:	4a09      	ldr	r2, [pc, #36]	@ (80049b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6013      	str	r3, [r2, #0]
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000604 	.word	0x20000604
 80049a0:	20000500 	.word	0x20000500
 80049a4:	20000608 	.word	0x20000608
 80049a8:	200005ec 	.word	0x200005ec
 80049ac:	200005bc 	.word	0x200005bc
 80049b0:	200005b8 	.word	0x200005b8
 80049b4:	20000620 	.word	0x20000620

080049b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b04      	subs	r3, #4
 80049c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b04      	subs	r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3b04      	subs	r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049e8:	4a0c      	ldr	r2, [pc, #48]	@ (8004a1c <pxPortInitialiseStack+0x64>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3b14      	subs	r3, #20
 80049f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3b04      	subs	r3, #4
 80049fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f06f 0202 	mvn.w	r2, #2
 8004a06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b20      	subs	r3, #32
 8004a0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	08004a21 	.word	0x08004a21

08004a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a2a:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <prvTaskExitError+0x58>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d00b      	beq.n	8004a4c <prvTaskExitError+0x2c>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	60fb      	str	r3, [r7, #12]
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	e7fd      	b.n	8004a48 <prvTaskExitError+0x28>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60bb      	str	r3, [r7, #8]
}
 8004a5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a60:	bf00      	nop
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0fc      	beq.n	8004a62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000020 	.word	0x20000020
 8004a7c:	00000000 	.word	0x00000000

08004a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a80:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <pxCurrentTCBConst2>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	f380 8809 	msr	PSP, r0
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f380 8811 	msr	BASEPRI, r0
 8004a9a:	4770      	bx	lr
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst2>:
 8004aa0:	20000500 	.word	0x20000500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004aa8:	4808      	ldr	r0, [pc, #32]	@ (8004acc <prvPortStartFirstTask+0x24>)
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f380 8808 	msr	MSP, r0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8814 	msr	CONTROL, r0
 8004aba:	b662      	cpsie	i
 8004abc:	b661      	cpsie	f
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	df00      	svc	0
 8004ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aca:	bf00      	nop
 8004acc:	e000ed08 	.word	0xe000ed08

08004ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ad6:	4b47      	ldr	r3, [pc, #284]	@ (8004bf4 <xPortStartScheduler+0x124>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a47      	ldr	r2, [pc, #284]	@ (8004bf8 <xPortStartScheduler+0x128>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10b      	bne.n	8004af8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004af8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf4 <xPortStartScheduler+0x124>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3f      	ldr	r2, [pc, #252]	@ (8004bfc <xPortStartScheduler+0x12c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10b      	bne.n	8004b1a <xPortStartScheduler+0x4a>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	613b      	str	r3, [r7, #16]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b1a:	4b39      	ldr	r3, [pc, #228]	@ (8004c00 <xPortStartScheduler+0x130>)
 8004b1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	22ff      	movs	r2, #255	@ 0xff
 8004b2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	4b31      	ldr	r3, [pc, #196]	@ (8004c04 <xPortStartScheduler+0x134>)
 8004b40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b42:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b44:	2207      	movs	r2, #7
 8004b46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b48:	e009      	b.n	8004b5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	4a2d      	ldr	r2, [pc, #180]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d0ef      	beq.n	8004b4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b6a:	4b27      	ldr	r3, [pc, #156]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1c3 0307 	rsb	r3, r3, #7
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d00b      	beq.n	8004b8e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60bb      	str	r3, [r7, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	4a1c      	ldr	r2, [pc, #112]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ba0:	4a19      	ldr	r2, [pc, #100]	@ (8004c08 <xPortStartScheduler+0x138>)
 8004ba2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bac:	4b17      	ldr	r3, [pc, #92]	@ (8004c0c <xPortStartScheduler+0x13c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a16      	ldr	r2, [pc, #88]	@ (8004c0c <xPortStartScheduler+0x13c>)
 8004bb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004bb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bb8:	4b14      	ldr	r3, [pc, #80]	@ (8004c0c <xPortStartScheduler+0x13c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	@ (8004c0c <xPortStartScheduler+0x13c>)
 8004bbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004bc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bc4:	f000 f8da 	bl	8004d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bc8:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <xPortStartScheduler+0x140>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bce:	f000 f8f9 	bl	8004dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bd2:	4b10      	ldr	r3, [pc, #64]	@ (8004c14 <xPortStartScheduler+0x144>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004c14 <xPortStartScheduler+0x144>)
 8004bd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004bdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bde:	f7ff ff63 	bl	8004aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004be2:	f7ff fd51 	bl	8004688 <vTaskSwitchContext>
	prvTaskExitError();
 8004be6:	f7ff ff1b 	bl	8004a20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	e000ed00 	.word	0xe000ed00
 8004bf8:	410fc271 	.word	0x410fc271
 8004bfc:	410fc270 	.word	0x410fc270
 8004c00:	e000e400 	.word	0xe000e400
 8004c04:	2000062c 	.word	0x2000062c
 8004c08:	20000630 	.word	0x20000630
 8004c0c:	e000ed20 	.word	0xe000ed20
 8004c10:	20000020 	.word	0x20000020
 8004c14:	e000ef34 	.word	0xe000ef34

08004c18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c32:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <vPortEnterCritical+0x5c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a0e      	ldr	r2, [pc, #56]	@ (8004c74 <vPortEnterCritical+0x5c>)
 8004c3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <vPortEnterCritical+0x5c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d110      	bne.n	8004c66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c44:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <vPortEnterCritical+0x60>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <vPortEnterCritical+0x4e>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	603b      	str	r3, [r7, #0]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <vPortEnterCritical+0x4a>
	}
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000020 	.word	0x20000020
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <vPortExitCritical+0x50>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10b      	bne.n	8004ca2 <vPortExitCritical+0x26>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	607b      	str	r3, [r7, #4]
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	e7fd      	b.n	8004c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <vPortExitCritical+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	4a08      	ldr	r2, [pc, #32]	@ (8004ccc <vPortExitCritical+0x50>)
 8004caa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cac:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <vPortExitCritical+0x50>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <vPortExitCritical+0x44>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20000020 	.word	0x20000020

08004cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cd0:	f3ef 8009 	mrs	r0, PSP
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4b15      	ldr	r3, [pc, #84]	@ (8004d30 <pxCurrentTCBConst>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f01e 0f10 	tst.w	lr, #16
 8004ce0:	bf08      	it	eq
 8004ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004cf4:	f380 8811 	msr	BASEPRI, r0
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f7ff fcc2 	bl	8004688 <vTaskSwitchContext>
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f380 8811 	msr	BASEPRI, r0
 8004d0c:	bc09      	pop	{r0, r3}
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	f01e 0f10 	tst.w	lr, #16
 8004d1a:	bf08      	it	eq
 8004d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d20:	f380 8809 	msr	PSP, r0
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst>:
 8004d30:	20000500 	.word	0x20000500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d52:	f7ff fbdf 	bl	8004514 <xTaskIncrementTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <SysTick_Handler+0x40>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	@ (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <vPortSetupTimerInterrupt+0x44>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b04      	ldr	r3, [pc, #16]	@ (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010
 8004db4:	e000e018 	.word	0xe000e018
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	e000e014 	.word	0xe000e014

08004dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004dd4 <vPortEnableVFP+0x10>
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004dce:	6001      	str	r1, [r0, #0]
 8004dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dd2:	bf00      	nop
 8004dd4:	e000ed88 	.word	0xe000ed88

08004dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004de4:	f7ff faea 	bl	80043bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004de8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f5c <pvPortMalloc+0x184>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004df0:	f000 f924 	bl	800503c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004df4:	4b5a      	ldr	r3, [pc, #360]	@ (8004f60 <pvPortMalloc+0x188>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8095 	bne.w	8004f2c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01e      	beq.n	8004e46 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e08:	2208      	movs	r2, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	3308      	adds	r3, #8
 8004e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <pvPortMalloc+0x6e>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	617b      	str	r3, [r7, #20]
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d06f      	beq.n	8004f2c <pvPortMalloc+0x154>
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <pvPortMalloc+0x18c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d86a      	bhi.n	8004f2c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e56:	4b44      	ldr	r3, [pc, #272]	@ (8004f68 <pvPortMalloc+0x190>)
 8004e58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e5a:	4b43      	ldr	r3, [pc, #268]	@ (8004f68 <pvPortMalloc+0x190>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e60:	e004      	b.n	8004e6c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d903      	bls.n	8004e7e <pvPortMalloc+0xa6>
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f1      	bne.n	8004e62 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e7e:	4b37      	ldr	r3, [pc, #220]	@ (8004f5c <pvPortMalloc+0x184>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d051      	beq.n	8004f2c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	4413      	add	r3, r2
 8004e90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d920      	bls.n	8004eec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4413      	add	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <pvPortMalloc+0xfc>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	613b      	str	r3, [r7, #16]
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ee6:	69b8      	ldr	r0, [r7, #24]
 8004ee8:	f000 f90a 	bl	8005100 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <pvPortMalloc+0x18c>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f64 <pvPortMalloc+0x18c>)
 8004ef8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004efa:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <pvPortMalloc+0x18c>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <pvPortMalloc+0x194>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d203      	bcs.n	8004f0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f06:	4b17      	ldr	r3, [pc, #92]	@ (8004f64 <pvPortMalloc+0x18c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <pvPortMalloc+0x194>)
 8004f0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	4b13      	ldr	r3, [pc, #76]	@ (8004f60 <pvPortMalloc+0x188>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f22:	4b13      	ldr	r3, [pc, #76]	@ (8004f70 <pvPortMalloc+0x198>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4a11      	ldr	r2, [pc, #68]	@ (8004f70 <pvPortMalloc+0x198>)
 8004f2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f2c:	f7ff fa54 	bl	80043d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <pvPortMalloc+0x17a>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60fb      	str	r3, [r7, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <pvPortMalloc+0x176>
	return pvReturn;
 8004f52:	69fb      	ldr	r3, [r7, #28]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3728      	adds	r7, #40	@ 0x28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	2000863c 	.word	0x2000863c
 8004f60:	20008650 	.word	0x20008650
 8004f64:	20008640 	.word	0x20008640
 8004f68:	20008634 	.word	0x20008634
 8004f6c:	20008644 	.word	0x20008644
 8004f70:	20008648 	.word	0x20008648

08004f74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04f      	beq.n	8005026 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f86:	2308      	movs	r3, #8
 8004f88:	425b      	negs	r3, r3
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	4b25      	ldr	r3, [pc, #148]	@ (8005030 <vPortFree+0xbc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <vPortFree+0x46>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	e7fd      	b.n	8004fb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <vPortFree+0x66>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60bb      	str	r3, [r7, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	e7fd      	b.n	8004fd6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <vPortFree+0xbc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01e      	beq.n	8005026 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d11a      	bne.n	8005026 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <vPortFree+0xbc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005000:	f7ff f9dc 	bl	80043bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <vPortFree+0xc0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4413      	add	r3, r2
 800500e:	4a09      	ldr	r2, [pc, #36]	@ (8005034 <vPortFree+0xc0>)
 8005010:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005012:	6938      	ldr	r0, [r7, #16]
 8005014:	f000 f874 	bl	8005100 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005018:	4b07      	ldr	r3, [pc, #28]	@ (8005038 <vPortFree+0xc4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	4a06      	ldr	r2, [pc, #24]	@ (8005038 <vPortFree+0xc4>)
 8005020:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005022:	f7ff f9d9 	bl	80043d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20008650 	.word	0x20008650
 8005034:	20008640 	.word	0x20008640
 8005038:	2000864c 	.word	0x2000864c

0800503c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005046:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005048:	4b27      	ldr	r3, [pc, #156]	@ (80050e8 <prvHeapInit+0xac>)
 800504a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00c      	beq.n	8005070 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3307      	adds	r3, #7
 800505a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0307 	bic.w	r3, r3, #7
 8005062:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	4a1f      	ldr	r2, [pc, #124]	@ (80050e8 <prvHeapInit+0xac>)
 800506c:	4413      	add	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005074:	4a1d      	ldr	r2, [pc, #116]	@ (80050ec <prvHeapInit+0xb0>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800507a:	4b1c      	ldr	r3, [pc, #112]	@ (80050ec <prvHeapInit+0xb0>)
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	4413      	add	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005088:	2208      	movs	r2, #8
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0307 	bic.w	r3, r3, #7
 8005096:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <prvHeapInit+0xb4>)
 800509c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800509e:	4b14      	ldr	r3, [pc, #80]	@ (80050f0 <prvHeapInit+0xb4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050a6:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <prvHeapInit+0xb4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050bc:	4b0c      	ldr	r3, [pc, #48]	@ (80050f0 <prvHeapInit+0xb4>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a0a      	ldr	r2, [pc, #40]	@ (80050f4 <prvHeapInit+0xb8>)
 80050ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <prvHeapInit+0xbc>)
 80050d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050d4:	4b09      	ldr	r3, [pc, #36]	@ (80050fc <prvHeapInit+0xc0>)
 80050d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050da:	601a      	str	r2, [r3, #0]
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	20000634 	.word	0x20000634
 80050ec:	20008634 	.word	0x20008634
 80050f0:	2000863c 	.word	0x2000863c
 80050f4:	20008644 	.word	0x20008644
 80050f8:	20008640 	.word	0x20008640
 80050fc:	20008650 	.word	0x20008650

08005100 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005108:	4b28      	ldr	r3, [pc, #160]	@ (80051ac <prvInsertBlockIntoFreeList+0xac>)
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e002      	b.n	8005114 <prvInsertBlockIntoFreeList+0x14>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	d8f7      	bhi.n	800510e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4413      	add	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d108      	bne.n	8005142 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	441a      	add	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d118      	bne.n	8005188 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <prvInsertBlockIntoFreeList+0xb0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d00d      	beq.n	800517e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	441a      	add	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e008      	b.n	8005190 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800517e:	4b0c      	ldr	r3, [pc, #48]	@ (80051b0 <prvInsertBlockIntoFreeList+0xb0>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e003      	b.n	8005190 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d002      	beq.n	800519e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20008634 	.word	0x20008634
 80051b0:	2000863c 	.word	0x2000863c

080051b4 <_vsniprintf_r>:
 80051b4:	b530      	push	{r4, r5, lr}
 80051b6:	4614      	mov	r4, r2
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	b09b      	sub	sp, #108	@ 0x6c
 80051bc:	4605      	mov	r5, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	da05      	bge.n	80051ce <_vsniprintf_r+0x1a>
 80051c2:	238b      	movs	r3, #139	@ 0x8b
 80051c4:	6003      	str	r3, [r0, #0]
 80051c6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ca:	b01b      	add	sp, #108	@ 0x6c
 80051cc:	bd30      	pop	{r4, r5, pc}
 80051ce:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80051d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	9319      	str	r3, [sp, #100]	@ 0x64
 80051dc:	bf14      	ite	ne
 80051de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80051e2:	4623      	moveq	r3, r4
 80051e4:	9302      	str	r3, [sp, #8]
 80051e6:	9305      	str	r3, [sp, #20]
 80051e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80051ec:	9100      	str	r1, [sp, #0]
 80051ee:	9104      	str	r1, [sp, #16]
 80051f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80051f4:	4669      	mov	r1, sp
 80051f6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80051f8:	f000 f9ae 	bl	8005558 <_svfiprintf_r>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	bfbc      	itt	lt
 8005200:	238b      	movlt	r3, #139	@ 0x8b
 8005202:	602b      	strlt	r3, [r5, #0]
 8005204:	2c00      	cmp	r4, #0
 8005206:	d0e0      	beq.n	80051ca <_vsniprintf_r+0x16>
 8005208:	9b00      	ldr	r3, [sp, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e7dc      	b.n	80051ca <_vsniprintf_r+0x16>

08005210 <vsniprintf>:
 8005210:	b507      	push	{r0, r1, r2, lr}
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	460a      	mov	r2, r1
 8005218:	4601      	mov	r1, r0
 800521a:	4803      	ldr	r0, [pc, #12]	@ (8005228 <vsniprintf+0x18>)
 800521c:	6800      	ldr	r0, [r0, #0]
 800521e:	f7ff ffc9 	bl	80051b4 <_vsniprintf_r>
 8005222:	b003      	add	sp, #12
 8005224:	f85d fb04 	ldr.w	pc, [sp], #4
 8005228:	20000024 	.word	0x20000024

0800522c <memset>:
 800522c:	4402      	add	r2, r0
 800522e:	4603      	mov	r3, r0
 8005230:	4293      	cmp	r3, r2
 8005232:	d100      	bne.n	8005236 <memset+0xa>
 8005234:	4770      	bx	lr
 8005236:	f803 1b01 	strb.w	r1, [r3], #1
 800523a:	e7f9      	b.n	8005230 <memset+0x4>

0800523c <__errno>:
 800523c:	4b01      	ldr	r3, [pc, #4]	@ (8005244 <__errno+0x8>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	20000024 	.word	0x20000024

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4d0d      	ldr	r5, [pc, #52]	@ (8005280 <__libc_init_array+0x38>)
 800524c:	4c0d      	ldr	r4, [pc, #52]	@ (8005284 <__libc_init_array+0x3c>)
 800524e:	1b64      	subs	r4, r4, r5
 8005250:	10a4      	asrs	r4, r4, #2
 8005252:	2600      	movs	r6, #0
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	4d0b      	ldr	r5, [pc, #44]	@ (8005288 <__libc_init_array+0x40>)
 800525a:	4c0c      	ldr	r4, [pc, #48]	@ (800528c <__libc_init_array+0x44>)
 800525c:	f000 fc64 	bl	8005b28 <_init>
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	2600      	movs	r6, #0
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	f855 3b04 	ldr.w	r3, [r5], #4
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	08005ca8 	.word	0x08005ca8
 8005284:	08005ca8 	.word	0x08005ca8
 8005288:	08005ca8 	.word	0x08005ca8
 800528c:	08005cac 	.word	0x08005cac

08005290 <__retarget_lock_acquire_recursive>:
 8005290:	4770      	bx	lr

08005292 <__retarget_lock_release_recursive>:
 8005292:	4770      	bx	lr

08005294 <memcpy>:
 8005294:	440a      	add	r2, r1
 8005296:	4291      	cmp	r1, r2
 8005298:	f100 33ff 	add.w	r3, r0, #4294967295
 800529c:	d100      	bne.n	80052a0 <memcpy+0xc>
 800529e:	4770      	bx	lr
 80052a0:	b510      	push	{r4, lr}
 80052a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052aa:	4291      	cmp	r1, r2
 80052ac:	d1f9      	bne.n	80052a2 <memcpy+0xe>
 80052ae:	bd10      	pop	{r4, pc}

080052b0 <_free_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4605      	mov	r5, r0
 80052b4:	2900      	cmp	r1, #0
 80052b6:	d041      	beq.n	800533c <_free_r+0x8c>
 80052b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052bc:	1f0c      	subs	r4, r1, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfb8      	it	lt
 80052c2:	18e4      	addlt	r4, r4, r3
 80052c4:	f000 f8e0 	bl	8005488 <__malloc_lock>
 80052c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005340 <_free_r+0x90>)
 80052ca:	6813      	ldr	r3, [r2, #0]
 80052cc:	b933      	cbnz	r3, 80052dc <_free_r+0x2c>
 80052ce:	6063      	str	r3, [r4, #4]
 80052d0:	6014      	str	r4, [r2, #0]
 80052d2:	4628      	mov	r0, r5
 80052d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d8:	f000 b8dc 	b.w	8005494 <__malloc_unlock>
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d908      	bls.n	80052f2 <_free_r+0x42>
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	1821      	adds	r1, r4, r0
 80052e4:	428b      	cmp	r3, r1
 80052e6:	bf01      	itttt	eq
 80052e8:	6819      	ldreq	r1, [r3, #0]
 80052ea:	685b      	ldreq	r3, [r3, #4]
 80052ec:	1809      	addeq	r1, r1, r0
 80052ee:	6021      	streq	r1, [r4, #0]
 80052f0:	e7ed      	b.n	80052ce <_free_r+0x1e>
 80052f2:	461a      	mov	r2, r3
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	b10b      	cbz	r3, 80052fc <_free_r+0x4c>
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d9fa      	bls.n	80052f2 <_free_r+0x42>
 80052fc:	6811      	ldr	r1, [r2, #0]
 80052fe:	1850      	adds	r0, r2, r1
 8005300:	42a0      	cmp	r0, r4
 8005302:	d10b      	bne.n	800531c <_free_r+0x6c>
 8005304:	6820      	ldr	r0, [r4, #0]
 8005306:	4401      	add	r1, r0
 8005308:	1850      	adds	r0, r2, r1
 800530a:	4283      	cmp	r3, r0
 800530c:	6011      	str	r1, [r2, #0]
 800530e:	d1e0      	bne.n	80052d2 <_free_r+0x22>
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	6053      	str	r3, [r2, #4]
 8005316:	4408      	add	r0, r1
 8005318:	6010      	str	r0, [r2, #0]
 800531a:	e7da      	b.n	80052d2 <_free_r+0x22>
 800531c:	d902      	bls.n	8005324 <_free_r+0x74>
 800531e:	230c      	movs	r3, #12
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	e7d6      	b.n	80052d2 <_free_r+0x22>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	1821      	adds	r1, r4, r0
 8005328:	428b      	cmp	r3, r1
 800532a:	bf04      	itt	eq
 800532c:	6819      	ldreq	r1, [r3, #0]
 800532e:	685b      	ldreq	r3, [r3, #4]
 8005330:	6063      	str	r3, [r4, #4]
 8005332:	bf04      	itt	eq
 8005334:	1809      	addeq	r1, r1, r0
 8005336:	6021      	streq	r1, [r4, #0]
 8005338:	6054      	str	r4, [r2, #4]
 800533a:	e7ca      	b.n	80052d2 <_free_r+0x22>
 800533c:	bd38      	pop	{r3, r4, r5, pc}
 800533e:	bf00      	nop
 8005340:	20008798 	.word	0x20008798

08005344 <sbrk_aligned>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	4e0f      	ldr	r6, [pc, #60]	@ (8005384 <sbrk_aligned+0x40>)
 8005348:	460c      	mov	r4, r1
 800534a:	6831      	ldr	r1, [r6, #0]
 800534c:	4605      	mov	r5, r0
 800534e:	b911      	cbnz	r1, 8005356 <sbrk_aligned+0x12>
 8005350:	f000 fba4 	bl	8005a9c <_sbrk_r>
 8005354:	6030      	str	r0, [r6, #0]
 8005356:	4621      	mov	r1, r4
 8005358:	4628      	mov	r0, r5
 800535a:	f000 fb9f 	bl	8005a9c <_sbrk_r>
 800535e:	1c43      	adds	r3, r0, #1
 8005360:	d103      	bne.n	800536a <sbrk_aligned+0x26>
 8005362:	f04f 34ff 	mov.w	r4, #4294967295
 8005366:	4620      	mov	r0, r4
 8005368:	bd70      	pop	{r4, r5, r6, pc}
 800536a:	1cc4      	adds	r4, r0, #3
 800536c:	f024 0403 	bic.w	r4, r4, #3
 8005370:	42a0      	cmp	r0, r4
 8005372:	d0f8      	beq.n	8005366 <sbrk_aligned+0x22>
 8005374:	1a21      	subs	r1, r4, r0
 8005376:	4628      	mov	r0, r5
 8005378:	f000 fb90 	bl	8005a9c <_sbrk_r>
 800537c:	3001      	adds	r0, #1
 800537e:	d1f2      	bne.n	8005366 <sbrk_aligned+0x22>
 8005380:	e7ef      	b.n	8005362 <sbrk_aligned+0x1e>
 8005382:	bf00      	nop
 8005384:	20008794 	.word	0x20008794

08005388 <_malloc_r>:
 8005388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800538c:	1ccd      	adds	r5, r1, #3
 800538e:	f025 0503 	bic.w	r5, r5, #3
 8005392:	3508      	adds	r5, #8
 8005394:	2d0c      	cmp	r5, #12
 8005396:	bf38      	it	cc
 8005398:	250c      	movcc	r5, #12
 800539a:	2d00      	cmp	r5, #0
 800539c:	4606      	mov	r6, r0
 800539e:	db01      	blt.n	80053a4 <_malloc_r+0x1c>
 80053a0:	42a9      	cmp	r1, r5
 80053a2:	d904      	bls.n	80053ae <_malloc_r+0x26>
 80053a4:	230c      	movs	r3, #12
 80053a6:	6033      	str	r3, [r6, #0]
 80053a8:	2000      	movs	r0, #0
 80053aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005484 <_malloc_r+0xfc>
 80053b2:	f000 f869 	bl	8005488 <__malloc_lock>
 80053b6:	f8d8 3000 	ldr.w	r3, [r8]
 80053ba:	461c      	mov	r4, r3
 80053bc:	bb44      	cbnz	r4, 8005410 <_malloc_r+0x88>
 80053be:	4629      	mov	r1, r5
 80053c0:	4630      	mov	r0, r6
 80053c2:	f7ff ffbf 	bl	8005344 <sbrk_aligned>
 80053c6:	1c43      	adds	r3, r0, #1
 80053c8:	4604      	mov	r4, r0
 80053ca:	d158      	bne.n	800547e <_malloc_r+0xf6>
 80053cc:	f8d8 4000 	ldr.w	r4, [r8]
 80053d0:	4627      	mov	r7, r4
 80053d2:	2f00      	cmp	r7, #0
 80053d4:	d143      	bne.n	800545e <_malloc_r+0xd6>
 80053d6:	2c00      	cmp	r4, #0
 80053d8:	d04b      	beq.n	8005472 <_malloc_r+0xea>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	4639      	mov	r1, r7
 80053de:	4630      	mov	r0, r6
 80053e0:	eb04 0903 	add.w	r9, r4, r3
 80053e4:	f000 fb5a 	bl	8005a9c <_sbrk_r>
 80053e8:	4581      	cmp	r9, r0
 80053ea:	d142      	bne.n	8005472 <_malloc_r+0xea>
 80053ec:	6821      	ldr	r1, [r4, #0]
 80053ee:	1a6d      	subs	r5, r5, r1
 80053f0:	4629      	mov	r1, r5
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7ff ffa6 	bl	8005344 <sbrk_aligned>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d03a      	beq.n	8005472 <_malloc_r+0xea>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	442b      	add	r3, r5
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	f8d8 3000 	ldr.w	r3, [r8]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	bb62      	cbnz	r2, 8005464 <_malloc_r+0xdc>
 800540a:	f8c8 7000 	str.w	r7, [r8]
 800540e:	e00f      	b.n	8005430 <_malloc_r+0xa8>
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	1b52      	subs	r2, r2, r5
 8005414:	d420      	bmi.n	8005458 <_malloc_r+0xd0>
 8005416:	2a0b      	cmp	r2, #11
 8005418:	d917      	bls.n	800544a <_malloc_r+0xc2>
 800541a:	1961      	adds	r1, r4, r5
 800541c:	42a3      	cmp	r3, r4
 800541e:	6025      	str	r5, [r4, #0]
 8005420:	bf18      	it	ne
 8005422:	6059      	strne	r1, [r3, #4]
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	bf08      	it	eq
 8005428:	f8c8 1000 	streq.w	r1, [r8]
 800542c:	5162      	str	r2, [r4, r5]
 800542e:	604b      	str	r3, [r1, #4]
 8005430:	4630      	mov	r0, r6
 8005432:	f000 f82f 	bl	8005494 <__malloc_unlock>
 8005436:	f104 000b 	add.w	r0, r4, #11
 800543a:	1d23      	adds	r3, r4, #4
 800543c:	f020 0007 	bic.w	r0, r0, #7
 8005440:	1ac2      	subs	r2, r0, r3
 8005442:	bf1c      	itt	ne
 8005444:	1a1b      	subne	r3, r3, r0
 8005446:	50a3      	strne	r3, [r4, r2]
 8005448:	e7af      	b.n	80053aa <_malloc_r+0x22>
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	42a3      	cmp	r3, r4
 800544e:	bf0c      	ite	eq
 8005450:	f8c8 2000 	streq.w	r2, [r8]
 8005454:	605a      	strne	r2, [r3, #4]
 8005456:	e7eb      	b.n	8005430 <_malloc_r+0xa8>
 8005458:	4623      	mov	r3, r4
 800545a:	6864      	ldr	r4, [r4, #4]
 800545c:	e7ae      	b.n	80053bc <_malloc_r+0x34>
 800545e:	463c      	mov	r4, r7
 8005460:	687f      	ldr	r7, [r7, #4]
 8005462:	e7b6      	b.n	80053d2 <_malloc_r+0x4a>
 8005464:	461a      	mov	r2, r3
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	42a3      	cmp	r3, r4
 800546a:	d1fb      	bne.n	8005464 <_malloc_r+0xdc>
 800546c:	2300      	movs	r3, #0
 800546e:	6053      	str	r3, [r2, #4]
 8005470:	e7de      	b.n	8005430 <_malloc_r+0xa8>
 8005472:	230c      	movs	r3, #12
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	4630      	mov	r0, r6
 8005478:	f000 f80c 	bl	8005494 <__malloc_unlock>
 800547c:	e794      	b.n	80053a8 <_malloc_r+0x20>
 800547e:	6005      	str	r5, [r0, #0]
 8005480:	e7d6      	b.n	8005430 <_malloc_r+0xa8>
 8005482:	bf00      	nop
 8005484:	20008798 	.word	0x20008798

08005488 <__malloc_lock>:
 8005488:	4801      	ldr	r0, [pc, #4]	@ (8005490 <__malloc_lock+0x8>)
 800548a:	f7ff bf01 	b.w	8005290 <__retarget_lock_acquire_recursive>
 800548e:	bf00      	nop
 8005490:	20008790 	.word	0x20008790

08005494 <__malloc_unlock>:
 8005494:	4801      	ldr	r0, [pc, #4]	@ (800549c <__malloc_unlock+0x8>)
 8005496:	f7ff befc 	b.w	8005292 <__retarget_lock_release_recursive>
 800549a:	bf00      	nop
 800549c:	20008790 	.word	0x20008790

080054a0 <__ssputs_r>:
 80054a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	688e      	ldr	r6, [r1, #8]
 80054a6:	461f      	mov	r7, r3
 80054a8:	42be      	cmp	r6, r7
 80054aa:	680b      	ldr	r3, [r1, #0]
 80054ac:	4682      	mov	sl, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	4690      	mov	r8, r2
 80054b2:	d82d      	bhi.n	8005510 <__ssputs_r+0x70>
 80054b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054bc:	d026      	beq.n	800550c <__ssputs_r+0x6c>
 80054be:	6965      	ldr	r5, [r4, #20]
 80054c0:	6909      	ldr	r1, [r1, #16]
 80054c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054c6:	eba3 0901 	sub.w	r9, r3, r1
 80054ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054ce:	1c7b      	adds	r3, r7, #1
 80054d0:	444b      	add	r3, r9
 80054d2:	106d      	asrs	r5, r5, #1
 80054d4:	429d      	cmp	r5, r3
 80054d6:	bf38      	it	cc
 80054d8:	461d      	movcc	r5, r3
 80054da:	0553      	lsls	r3, r2, #21
 80054dc:	d527      	bpl.n	800552e <__ssputs_r+0x8e>
 80054de:	4629      	mov	r1, r5
 80054e0:	f7ff ff52 	bl	8005388 <_malloc_r>
 80054e4:	4606      	mov	r6, r0
 80054e6:	b360      	cbz	r0, 8005542 <__ssputs_r+0xa2>
 80054e8:	6921      	ldr	r1, [r4, #16]
 80054ea:	464a      	mov	r2, r9
 80054ec:	f7ff fed2 	bl	8005294 <memcpy>
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fa:	81a3      	strh	r3, [r4, #12]
 80054fc:	6126      	str	r6, [r4, #16]
 80054fe:	6165      	str	r5, [r4, #20]
 8005500:	444e      	add	r6, r9
 8005502:	eba5 0509 	sub.w	r5, r5, r9
 8005506:	6026      	str	r6, [r4, #0]
 8005508:	60a5      	str	r5, [r4, #8]
 800550a:	463e      	mov	r6, r7
 800550c:	42be      	cmp	r6, r7
 800550e:	d900      	bls.n	8005512 <__ssputs_r+0x72>
 8005510:	463e      	mov	r6, r7
 8005512:	6820      	ldr	r0, [r4, #0]
 8005514:	4632      	mov	r2, r6
 8005516:	4641      	mov	r1, r8
 8005518:	f000 faa6 	bl	8005a68 <memmove>
 800551c:	68a3      	ldr	r3, [r4, #8]
 800551e:	1b9b      	subs	r3, r3, r6
 8005520:	60a3      	str	r3, [r4, #8]
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	4433      	add	r3, r6
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	2000      	movs	r0, #0
 800552a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552e:	462a      	mov	r2, r5
 8005530:	f000 fac4 	bl	8005abc <_realloc_r>
 8005534:	4606      	mov	r6, r0
 8005536:	2800      	cmp	r0, #0
 8005538:	d1e0      	bne.n	80054fc <__ssputs_r+0x5c>
 800553a:	6921      	ldr	r1, [r4, #16]
 800553c:	4650      	mov	r0, sl
 800553e:	f7ff feb7 	bl	80052b0 <_free_r>
 8005542:	230c      	movs	r3, #12
 8005544:	f8ca 3000 	str.w	r3, [sl]
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800554e:	81a3      	strh	r3, [r4, #12]
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	e7e9      	b.n	800552a <__ssputs_r+0x8a>
	...

08005558 <_svfiprintf_r>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	4698      	mov	r8, r3
 800555e:	898b      	ldrh	r3, [r1, #12]
 8005560:	061b      	lsls	r3, r3, #24
 8005562:	b09d      	sub	sp, #116	@ 0x74
 8005564:	4607      	mov	r7, r0
 8005566:	460d      	mov	r5, r1
 8005568:	4614      	mov	r4, r2
 800556a:	d510      	bpl.n	800558e <_svfiprintf_r+0x36>
 800556c:	690b      	ldr	r3, [r1, #16]
 800556e:	b973      	cbnz	r3, 800558e <_svfiprintf_r+0x36>
 8005570:	2140      	movs	r1, #64	@ 0x40
 8005572:	f7ff ff09 	bl	8005388 <_malloc_r>
 8005576:	6028      	str	r0, [r5, #0]
 8005578:	6128      	str	r0, [r5, #16]
 800557a:	b930      	cbnz	r0, 800558a <_svfiprintf_r+0x32>
 800557c:	230c      	movs	r3, #12
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	b01d      	add	sp, #116	@ 0x74
 8005586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558a:	2340      	movs	r3, #64	@ 0x40
 800558c:	616b      	str	r3, [r5, #20]
 800558e:	2300      	movs	r3, #0
 8005590:	9309      	str	r3, [sp, #36]	@ 0x24
 8005592:	2320      	movs	r3, #32
 8005594:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005598:	f8cd 800c 	str.w	r8, [sp, #12]
 800559c:	2330      	movs	r3, #48	@ 0x30
 800559e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800573c <_svfiprintf_r+0x1e4>
 80055a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055a6:	f04f 0901 	mov.w	r9, #1
 80055aa:	4623      	mov	r3, r4
 80055ac:	469a      	mov	sl, r3
 80055ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055b2:	b10a      	cbz	r2, 80055b8 <_svfiprintf_r+0x60>
 80055b4:	2a25      	cmp	r2, #37	@ 0x25
 80055b6:	d1f9      	bne.n	80055ac <_svfiprintf_r+0x54>
 80055b8:	ebba 0b04 	subs.w	fp, sl, r4
 80055bc:	d00b      	beq.n	80055d6 <_svfiprintf_r+0x7e>
 80055be:	465b      	mov	r3, fp
 80055c0:	4622      	mov	r2, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	4638      	mov	r0, r7
 80055c6:	f7ff ff6b 	bl	80054a0 <__ssputs_r>
 80055ca:	3001      	adds	r0, #1
 80055cc:	f000 80a7 	beq.w	800571e <_svfiprintf_r+0x1c6>
 80055d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055d2:	445a      	add	r2, fp
 80055d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055d6:	f89a 3000 	ldrb.w	r3, [sl]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 809f 	beq.w	800571e <_svfiprintf_r+0x1c6>
 80055e0:	2300      	movs	r3, #0
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295
 80055e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ea:	f10a 0a01 	add.w	sl, sl, #1
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	9307      	str	r3, [sp, #28]
 80055f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80055f8:	4654      	mov	r4, sl
 80055fa:	2205      	movs	r2, #5
 80055fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005600:	484e      	ldr	r0, [pc, #312]	@ (800573c <_svfiprintf_r+0x1e4>)
 8005602:	f7fa fdf5 	bl	80001f0 <memchr>
 8005606:	9a04      	ldr	r2, [sp, #16]
 8005608:	b9d8      	cbnz	r0, 8005642 <_svfiprintf_r+0xea>
 800560a:	06d0      	lsls	r0, r2, #27
 800560c:	bf44      	itt	mi
 800560e:	2320      	movmi	r3, #32
 8005610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005614:	0711      	lsls	r1, r2, #28
 8005616:	bf44      	itt	mi
 8005618:	232b      	movmi	r3, #43	@ 0x2b
 800561a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800561e:	f89a 3000 	ldrb.w	r3, [sl]
 8005622:	2b2a      	cmp	r3, #42	@ 0x2a
 8005624:	d015      	beq.n	8005652 <_svfiprintf_r+0xfa>
 8005626:	9a07      	ldr	r2, [sp, #28]
 8005628:	4654      	mov	r4, sl
 800562a:	2000      	movs	r0, #0
 800562c:	f04f 0c0a 	mov.w	ip, #10
 8005630:	4621      	mov	r1, r4
 8005632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005636:	3b30      	subs	r3, #48	@ 0x30
 8005638:	2b09      	cmp	r3, #9
 800563a:	d94b      	bls.n	80056d4 <_svfiprintf_r+0x17c>
 800563c:	b1b0      	cbz	r0, 800566c <_svfiprintf_r+0x114>
 800563e:	9207      	str	r2, [sp, #28]
 8005640:	e014      	b.n	800566c <_svfiprintf_r+0x114>
 8005642:	eba0 0308 	sub.w	r3, r0, r8
 8005646:	fa09 f303 	lsl.w	r3, r9, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	46a2      	mov	sl, r4
 8005650:	e7d2      	b.n	80055f8 <_svfiprintf_r+0xa0>
 8005652:	9b03      	ldr	r3, [sp, #12]
 8005654:	1d19      	adds	r1, r3, #4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	9103      	str	r1, [sp, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfbb      	ittet	lt
 800565e:	425b      	neglt	r3, r3
 8005660:	f042 0202 	orrlt.w	r2, r2, #2
 8005664:	9307      	strge	r3, [sp, #28]
 8005666:	9307      	strlt	r3, [sp, #28]
 8005668:	bfb8      	it	lt
 800566a:	9204      	strlt	r2, [sp, #16]
 800566c:	7823      	ldrb	r3, [r4, #0]
 800566e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005670:	d10a      	bne.n	8005688 <_svfiprintf_r+0x130>
 8005672:	7863      	ldrb	r3, [r4, #1]
 8005674:	2b2a      	cmp	r3, #42	@ 0x2a
 8005676:	d132      	bne.n	80056de <_svfiprintf_r+0x186>
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	9203      	str	r2, [sp, #12]
 8005680:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005684:	3402      	adds	r4, #2
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800574c <_svfiprintf_r+0x1f4>
 800568c:	7821      	ldrb	r1, [r4, #0]
 800568e:	2203      	movs	r2, #3
 8005690:	4650      	mov	r0, sl
 8005692:	f7fa fdad 	bl	80001f0 <memchr>
 8005696:	b138      	cbz	r0, 80056a8 <_svfiprintf_r+0x150>
 8005698:	9b04      	ldr	r3, [sp, #16]
 800569a:	eba0 000a 	sub.w	r0, r0, sl
 800569e:	2240      	movs	r2, #64	@ 0x40
 80056a0:	4082      	lsls	r2, r0
 80056a2:	4313      	orrs	r3, r2
 80056a4:	3401      	adds	r4, #1
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ac:	4824      	ldr	r0, [pc, #144]	@ (8005740 <_svfiprintf_r+0x1e8>)
 80056ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056b2:	2206      	movs	r2, #6
 80056b4:	f7fa fd9c 	bl	80001f0 <memchr>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d036      	beq.n	800572a <_svfiprintf_r+0x1d2>
 80056bc:	4b21      	ldr	r3, [pc, #132]	@ (8005744 <_svfiprintf_r+0x1ec>)
 80056be:	bb1b      	cbnz	r3, 8005708 <_svfiprintf_r+0x1b0>
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	3307      	adds	r3, #7
 80056c4:	f023 0307 	bic.w	r3, r3, #7
 80056c8:	3308      	adds	r3, #8
 80056ca:	9303      	str	r3, [sp, #12]
 80056cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ce:	4433      	add	r3, r6
 80056d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80056d2:	e76a      	b.n	80055aa <_svfiprintf_r+0x52>
 80056d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d8:	460c      	mov	r4, r1
 80056da:	2001      	movs	r0, #1
 80056dc:	e7a8      	b.n	8005630 <_svfiprintf_r+0xd8>
 80056de:	2300      	movs	r3, #0
 80056e0:	3401      	adds	r4, #1
 80056e2:	9305      	str	r3, [sp, #20]
 80056e4:	4619      	mov	r1, r3
 80056e6:	f04f 0c0a 	mov.w	ip, #10
 80056ea:	4620      	mov	r0, r4
 80056ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f0:	3a30      	subs	r2, #48	@ 0x30
 80056f2:	2a09      	cmp	r2, #9
 80056f4:	d903      	bls.n	80056fe <_svfiprintf_r+0x1a6>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0c6      	beq.n	8005688 <_svfiprintf_r+0x130>
 80056fa:	9105      	str	r1, [sp, #20]
 80056fc:	e7c4      	b.n	8005688 <_svfiprintf_r+0x130>
 80056fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005702:	4604      	mov	r4, r0
 8005704:	2301      	movs	r3, #1
 8005706:	e7f0      	b.n	80056ea <_svfiprintf_r+0x192>
 8005708:	ab03      	add	r3, sp, #12
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	462a      	mov	r2, r5
 800570e:	4b0e      	ldr	r3, [pc, #56]	@ (8005748 <_svfiprintf_r+0x1f0>)
 8005710:	a904      	add	r1, sp, #16
 8005712:	4638      	mov	r0, r7
 8005714:	f3af 8000 	nop.w
 8005718:	1c42      	adds	r2, r0, #1
 800571a:	4606      	mov	r6, r0
 800571c:	d1d6      	bne.n	80056cc <_svfiprintf_r+0x174>
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	065b      	lsls	r3, r3, #25
 8005722:	f53f af2d 	bmi.w	8005580 <_svfiprintf_r+0x28>
 8005726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005728:	e72c      	b.n	8005584 <_svfiprintf_r+0x2c>
 800572a:	ab03      	add	r3, sp, #12
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	462a      	mov	r2, r5
 8005730:	4b05      	ldr	r3, [pc, #20]	@ (8005748 <_svfiprintf_r+0x1f0>)
 8005732:	a904      	add	r1, sp, #16
 8005734:	4638      	mov	r0, r7
 8005736:	f000 f879 	bl	800582c <_printf_i>
 800573a:	e7ed      	b.n	8005718 <_svfiprintf_r+0x1c0>
 800573c:	08005c6c 	.word	0x08005c6c
 8005740:	08005c76 	.word	0x08005c76
 8005744:	00000000 	.word	0x00000000
 8005748:	080054a1 	.word	0x080054a1
 800574c:	08005c72 	.word	0x08005c72

08005750 <_printf_common>:
 8005750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	4616      	mov	r6, r2
 8005756:	4698      	mov	r8, r3
 8005758:	688a      	ldr	r2, [r1, #8]
 800575a:	690b      	ldr	r3, [r1, #16]
 800575c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005760:	4293      	cmp	r3, r2
 8005762:	bfb8      	it	lt
 8005764:	4613      	movlt	r3, r2
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800576c:	4607      	mov	r7, r0
 800576e:	460c      	mov	r4, r1
 8005770:	b10a      	cbz	r2, 8005776 <_printf_common+0x26>
 8005772:	3301      	adds	r3, #1
 8005774:	6033      	str	r3, [r6, #0]
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	0699      	lsls	r1, r3, #26
 800577a:	bf42      	ittt	mi
 800577c:	6833      	ldrmi	r3, [r6, #0]
 800577e:	3302      	addmi	r3, #2
 8005780:	6033      	strmi	r3, [r6, #0]
 8005782:	6825      	ldr	r5, [r4, #0]
 8005784:	f015 0506 	ands.w	r5, r5, #6
 8005788:	d106      	bne.n	8005798 <_printf_common+0x48>
 800578a:	f104 0a19 	add.w	sl, r4, #25
 800578e:	68e3      	ldr	r3, [r4, #12]
 8005790:	6832      	ldr	r2, [r6, #0]
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	42ab      	cmp	r3, r5
 8005796:	dc26      	bgt.n	80057e6 <_printf_common+0x96>
 8005798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	3b00      	subs	r3, #0
 80057a0:	bf18      	it	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	0692      	lsls	r2, r2, #26
 80057a6:	d42b      	bmi.n	8005800 <_printf_common+0xb0>
 80057a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057ac:	4641      	mov	r1, r8
 80057ae:	4638      	mov	r0, r7
 80057b0:	47c8      	blx	r9
 80057b2:	3001      	adds	r0, #1
 80057b4:	d01e      	beq.n	80057f4 <_printf_common+0xa4>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	6922      	ldr	r2, [r4, #16]
 80057ba:	f003 0306 	and.w	r3, r3, #6
 80057be:	2b04      	cmp	r3, #4
 80057c0:	bf02      	ittt	eq
 80057c2:	68e5      	ldreq	r5, [r4, #12]
 80057c4:	6833      	ldreq	r3, [r6, #0]
 80057c6:	1aed      	subeq	r5, r5, r3
 80057c8:	68a3      	ldr	r3, [r4, #8]
 80057ca:	bf0c      	ite	eq
 80057cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d0:	2500      	movne	r5, #0
 80057d2:	4293      	cmp	r3, r2
 80057d4:	bfc4      	itt	gt
 80057d6:	1a9b      	subgt	r3, r3, r2
 80057d8:	18ed      	addgt	r5, r5, r3
 80057da:	2600      	movs	r6, #0
 80057dc:	341a      	adds	r4, #26
 80057de:	42b5      	cmp	r5, r6
 80057e0:	d11a      	bne.n	8005818 <_printf_common+0xc8>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e008      	b.n	80057f8 <_printf_common+0xa8>
 80057e6:	2301      	movs	r3, #1
 80057e8:	4652      	mov	r2, sl
 80057ea:	4641      	mov	r1, r8
 80057ec:	4638      	mov	r0, r7
 80057ee:	47c8      	blx	r9
 80057f0:	3001      	adds	r0, #1
 80057f2:	d103      	bne.n	80057fc <_printf_common+0xac>
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fc:	3501      	adds	r5, #1
 80057fe:	e7c6      	b.n	800578e <_printf_common+0x3e>
 8005800:	18e1      	adds	r1, r4, r3
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	2030      	movs	r0, #48	@ 0x30
 8005806:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800580a:	4422      	add	r2, r4
 800580c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005814:	3302      	adds	r3, #2
 8005816:	e7c7      	b.n	80057a8 <_printf_common+0x58>
 8005818:	2301      	movs	r3, #1
 800581a:	4622      	mov	r2, r4
 800581c:	4641      	mov	r1, r8
 800581e:	4638      	mov	r0, r7
 8005820:	47c8      	blx	r9
 8005822:	3001      	adds	r0, #1
 8005824:	d0e6      	beq.n	80057f4 <_printf_common+0xa4>
 8005826:	3601      	adds	r6, #1
 8005828:	e7d9      	b.n	80057de <_printf_common+0x8e>
	...

0800582c <_printf_i>:
 800582c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	7e0f      	ldrb	r7, [r1, #24]
 8005832:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005834:	2f78      	cmp	r7, #120	@ 0x78
 8005836:	4691      	mov	r9, r2
 8005838:	4680      	mov	r8, r0
 800583a:	460c      	mov	r4, r1
 800583c:	469a      	mov	sl, r3
 800583e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005842:	d807      	bhi.n	8005854 <_printf_i+0x28>
 8005844:	2f62      	cmp	r7, #98	@ 0x62
 8005846:	d80a      	bhi.n	800585e <_printf_i+0x32>
 8005848:	2f00      	cmp	r7, #0
 800584a:	f000 80d1 	beq.w	80059f0 <_printf_i+0x1c4>
 800584e:	2f58      	cmp	r7, #88	@ 0x58
 8005850:	f000 80b8 	beq.w	80059c4 <_printf_i+0x198>
 8005854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800585c:	e03a      	b.n	80058d4 <_printf_i+0xa8>
 800585e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005862:	2b15      	cmp	r3, #21
 8005864:	d8f6      	bhi.n	8005854 <_printf_i+0x28>
 8005866:	a101      	add	r1, pc, #4	@ (adr r1, 800586c <_printf_i+0x40>)
 8005868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800586c:	080058c5 	.word	0x080058c5
 8005870:	080058d9 	.word	0x080058d9
 8005874:	08005855 	.word	0x08005855
 8005878:	08005855 	.word	0x08005855
 800587c:	08005855 	.word	0x08005855
 8005880:	08005855 	.word	0x08005855
 8005884:	080058d9 	.word	0x080058d9
 8005888:	08005855 	.word	0x08005855
 800588c:	08005855 	.word	0x08005855
 8005890:	08005855 	.word	0x08005855
 8005894:	08005855 	.word	0x08005855
 8005898:	080059d7 	.word	0x080059d7
 800589c:	08005903 	.word	0x08005903
 80058a0:	08005991 	.word	0x08005991
 80058a4:	08005855 	.word	0x08005855
 80058a8:	08005855 	.word	0x08005855
 80058ac:	080059f9 	.word	0x080059f9
 80058b0:	08005855 	.word	0x08005855
 80058b4:	08005903 	.word	0x08005903
 80058b8:	08005855 	.word	0x08005855
 80058bc:	08005855 	.word	0x08005855
 80058c0:	08005999 	.word	0x08005999
 80058c4:	6833      	ldr	r3, [r6, #0]
 80058c6:	1d1a      	adds	r2, r3, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6032      	str	r2, [r6, #0]
 80058cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058d4:	2301      	movs	r3, #1
 80058d6:	e09c      	b.n	8005a12 <_printf_i+0x1e6>
 80058d8:	6833      	ldr	r3, [r6, #0]
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	1d19      	adds	r1, r3, #4
 80058de:	6031      	str	r1, [r6, #0]
 80058e0:	0606      	lsls	r6, r0, #24
 80058e2:	d501      	bpl.n	80058e8 <_printf_i+0xbc>
 80058e4:	681d      	ldr	r5, [r3, #0]
 80058e6:	e003      	b.n	80058f0 <_printf_i+0xc4>
 80058e8:	0645      	lsls	r5, r0, #25
 80058ea:	d5fb      	bpl.n	80058e4 <_printf_i+0xb8>
 80058ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	da03      	bge.n	80058fc <_printf_i+0xd0>
 80058f4:	232d      	movs	r3, #45	@ 0x2d
 80058f6:	426d      	negs	r5, r5
 80058f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058fc:	4858      	ldr	r0, [pc, #352]	@ (8005a60 <_printf_i+0x234>)
 80058fe:	230a      	movs	r3, #10
 8005900:	e011      	b.n	8005926 <_printf_i+0xfa>
 8005902:	6821      	ldr	r1, [r4, #0]
 8005904:	6833      	ldr	r3, [r6, #0]
 8005906:	0608      	lsls	r0, r1, #24
 8005908:	f853 5b04 	ldr.w	r5, [r3], #4
 800590c:	d402      	bmi.n	8005914 <_printf_i+0xe8>
 800590e:	0649      	lsls	r1, r1, #25
 8005910:	bf48      	it	mi
 8005912:	b2ad      	uxthmi	r5, r5
 8005914:	2f6f      	cmp	r7, #111	@ 0x6f
 8005916:	4852      	ldr	r0, [pc, #328]	@ (8005a60 <_printf_i+0x234>)
 8005918:	6033      	str	r3, [r6, #0]
 800591a:	bf14      	ite	ne
 800591c:	230a      	movne	r3, #10
 800591e:	2308      	moveq	r3, #8
 8005920:	2100      	movs	r1, #0
 8005922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005926:	6866      	ldr	r6, [r4, #4]
 8005928:	60a6      	str	r6, [r4, #8]
 800592a:	2e00      	cmp	r6, #0
 800592c:	db05      	blt.n	800593a <_printf_i+0x10e>
 800592e:	6821      	ldr	r1, [r4, #0]
 8005930:	432e      	orrs	r6, r5
 8005932:	f021 0104 	bic.w	r1, r1, #4
 8005936:	6021      	str	r1, [r4, #0]
 8005938:	d04b      	beq.n	80059d2 <_printf_i+0x1a6>
 800593a:	4616      	mov	r6, r2
 800593c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005940:	fb03 5711 	mls	r7, r3, r1, r5
 8005944:	5dc7      	ldrb	r7, [r0, r7]
 8005946:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800594a:	462f      	mov	r7, r5
 800594c:	42bb      	cmp	r3, r7
 800594e:	460d      	mov	r5, r1
 8005950:	d9f4      	bls.n	800593c <_printf_i+0x110>
 8005952:	2b08      	cmp	r3, #8
 8005954:	d10b      	bne.n	800596e <_printf_i+0x142>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	07df      	lsls	r7, r3, #31
 800595a:	d508      	bpl.n	800596e <_printf_i+0x142>
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	6861      	ldr	r1, [r4, #4]
 8005960:	4299      	cmp	r1, r3
 8005962:	bfde      	ittt	le
 8005964:	2330      	movle	r3, #48	@ 0x30
 8005966:	f806 3c01 	strble.w	r3, [r6, #-1]
 800596a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800596e:	1b92      	subs	r2, r2, r6
 8005970:	6122      	str	r2, [r4, #16]
 8005972:	f8cd a000 	str.w	sl, [sp]
 8005976:	464b      	mov	r3, r9
 8005978:	aa03      	add	r2, sp, #12
 800597a:	4621      	mov	r1, r4
 800597c:	4640      	mov	r0, r8
 800597e:	f7ff fee7 	bl	8005750 <_printf_common>
 8005982:	3001      	adds	r0, #1
 8005984:	d14a      	bne.n	8005a1c <_printf_i+0x1f0>
 8005986:	f04f 30ff 	mov.w	r0, #4294967295
 800598a:	b004      	add	sp, #16
 800598c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	f043 0320 	orr.w	r3, r3, #32
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	4832      	ldr	r0, [pc, #200]	@ (8005a64 <_printf_i+0x238>)
 800599a:	2778      	movs	r7, #120	@ 0x78
 800599c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	6831      	ldr	r1, [r6, #0]
 80059a4:	061f      	lsls	r7, r3, #24
 80059a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80059aa:	d402      	bmi.n	80059b2 <_printf_i+0x186>
 80059ac:	065f      	lsls	r7, r3, #25
 80059ae:	bf48      	it	mi
 80059b0:	b2ad      	uxthmi	r5, r5
 80059b2:	6031      	str	r1, [r6, #0]
 80059b4:	07d9      	lsls	r1, r3, #31
 80059b6:	bf44      	itt	mi
 80059b8:	f043 0320 	orrmi.w	r3, r3, #32
 80059bc:	6023      	strmi	r3, [r4, #0]
 80059be:	b11d      	cbz	r5, 80059c8 <_printf_i+0x19c>
 80059c0:	2310      	movs	r3, #16
 80059c2:	e7ad      	b.n	8005920 <_printf_i+0xf4>
 80059c4:	4826      	ldr	r0, [pc, #152]	@ (8005a60 <_printf_i+0x234>)
 80059c6:	e7e9      	b.n	800599c <_printf_i+0x170>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	f023 0320 	bic.w	r3, r3, #32
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	e7f6      	b.n	80059c0 <_printf_i+0x194>
 80059d2:	4616      	mov	r6, r2
 80059d4:	e7bd      	b.n	8005952 <_printf_i+0x126>
 80059d6:	6833      	ldr	r3, [r6, #0]
 80059d8:	6825      	ldr	r5, [r4, #0]
 80059da:	6961      	ldr	r1, [r4, #20]
 80059dc:	1d18      	adds	r0, r3, #4
 80059de:	6030      	str	r0, [r6, #0]
 80059e0:	062e      	lsls	r6, r5, #24
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	d501      	bpl.n	80059ea <_printf_i+0x1be>
 80059e6:	6019      	str	r1, [r3, #0]
 80059e8:	e002      	b.n	80059f0 <_printf_i+0x1c4>
 80059ea:	0668      	lsls	r0, r5, #25
 80059ec:	d5fb      	bpl.n	80059e6 <_printf_i+0x1ba>
 80059ee:	8019      	strh	r1, [r3, #0]
 80059f0:	2300      	movs	r3, #0
 80059f2:	6123      	str	r3, [r4, #16]
 80059f4:	4616      	mov	r6, r2
 80059f6:	e7bc      	b.n	8005972 <_printf_i+0x146>
 80059f8:	6833      	ldr	r3, [r6, #0]
 80059fa:	1d1a      	adds	r2, r3, #4
 80059fc:	6032      	str	r2, [r6, #0]
 80059fe:	681e      	ldr	r6, [r3, #0]
 8005a00:	6862      	ldr	r2, [r4, #4]
 8005a02:	2100      	movs	r1, #0
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7fa fbf3 	bl	80001f0 <memchr>
 8005a0a:	b108      	cbz	r0, 8005a10 <_printf_i+0x1e4>
 8005a0c:	1b80      	subs	r0, r0, r6
 8005a0e:	6060      	str	r0, [r4, #4]
 8005a10:	6863      	ldr	r3, [r4, #4]
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	2300      	movs	r3, #0
 8005a16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a1a:	e7aa      	b.n	8005972 <_printf_i+0x146>
 8005a1c:	6923      	ldr	r3, [r4, #16]
 8005a1e:	4632      	mov	r2, r6
 8005a20:	4649      	mov	r1, r9
 8005a22:	4640      	mov	r0, r8
 8005a24:	47d0      	blx	sl
 8005a26:	3001      	adds	r0, #1
 8005a28:	d0ad      	beq.n	8005986 <_printf_i+0x15a>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	079b      	lsls	r3, r3, #30
 8005a2e:	d413      	bmi.n	8005a58 <_printf_i+0x22c>
 8005a30:	68e0      	ldr	r0, [r4, #12]
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	4298      	cmp	r0, r3
 8005a36:	bfb8      	it	lt
 8005a38:	4618      	movlt	r0, r3
 8005a3a:	e7a6      	b.n	800598a <_printf_i+0x15e>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4632      	mov	r2, r6
 8005a40:	4649      	mov	r1, r9
 8005a42:	4640      	mov	r0, r8
 8005a44:	47d0      	blx	sl
 8005a46:	3001      	adds	r0, #1
 8005a48:	d09d      	beq.n	8005986 <_printf_i+0x15a>
 8005a4a:	3501      	adds	r5, #1
 8005a4c:	68e3      	ldr	r3, [r4, #12]
 8005a4e:	9903      	ldr	r1, [sp, #12]
 8005a50:	1a5b      	subs	r3, r3, r1
 8005a52:	42ab      	cmp	r3, r5
 8005a54:	dcf2      	bgt.n	8005a3c <_printf_i+0x210>
 8005a56:	e7eb      	b.n	8005a30 <_printf_i+0x204>
 8005a58:	2500      	movs	r5, #0
 8005a5a:	f104 0619 	add.w	r6, r4, #25
 8005a5e:	e7f5      	b.n	8005a4c <_printf_i+0x220>
 8005a60:	08005c7d 	.word	0x08005c7d
 8005a64:	08005c8e 	.word	0x08005c8e

08005a68 <memmove>:
 8005a68:	4288      	cmp	r0, r1
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	eb01 0402 	add.w	r4, r1, r2
 8005a70:	d902      	bls.n	8005a78 <memmove+0x10>
 8005a72:	4284      	cmp	r4, r0
 8005a74:	4623      	mov	r3, r4
 8005a76:	d807      	bhi.n	8005a88 <memmove+0x20>
 8005a78:	1e43      	subs	r3, r0, #1
 8005a7a:	42a1      	cmp	r1, r4
 8005a7c:	d008      	beq.n	8005a90 <memmove+0x28>
 8005a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a86:	e7f8      	b.n	8005a7a <memmove+0x12>
 8005a88:	4402      	add	r2, r0
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	428a      	cmp	r2, r1
 8005a8e:	d100      	bne.n	8005a92 <memmove+0x2a>
 8005a90:	bd10      	pop	{r4, pc}
 8005a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a9a:	e7f7      	b.n	8005a8c <memmove+0x24>

08005a9c <_sbrk_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4d06      	ldr	r5, [pc, #24]	@ (8005ab8 <_sbrk_r+0x1c>)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	f7fb f93c 	bl	8000d24 <_sbrk>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_sbrk_r+0x1a>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_sbrk_r+0x1a>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	2000878c 	.word	0x2000878c

08005abc <_realloc_r>:
 8005abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	4614      	mov	r4, r2
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	b921      	cbnz	r1, 8005ad2 <_realloc_r+0x16>
 8005ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005acc:	4611      	mov	r1, r2
 8005ace:	f7ff bc5b 	b.w	8005388 <_malloc_r>
 8005ad2:	b92a      	cbnz	r2, 8005ae0 <_realloc_r+0x24>
 8005ad4:	f7ff fbec 	bl	80052b0 <_free_r>
 8005ad8:	4625      	mov	r5, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae0:	f000 f81a 	bl	8005b18 <_malloc_usable_size_r>
 8005ae4:	4284      	cmp	r4, r0
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	d802      	bhi.n	8005af0 <_realloc_r+0x34>
 8005aea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005aee:	d8f4      	bhi.n	8005ada <_realloc_r+0x1e>
 8005af0:	4621      	mov	r1, r4
 8005af2:	4638      	mov	r0, r7
 8005af4:	f7ff fc48 	bl	8005388 <_malloc_r>
 8005af8:	4680      	mov	r8, r0
 8005afa:	b908      	cbnz	r0, 8005b00 <_realloc_r+0x44>
 8005afc:	4645      	mov	r5, r8
 8005afe:	e7ec      	b.n	8005ada <_realloc_r+0x1e>
 8005b00:	42b4      	cmp	r4, r6
 8005b02:	4622      	mov	r2, r4
 8005b04:	4629      	mov	r1, r5
 8005b06:	bf28      	it	cs
 8005b08:	4632      	movcs	r2, r6
 8005b0a:	f7ff fbc3 	bl	8005294 <memcpy>
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7ff fbcd 	bl	80052b0 <_free_r>
 8005b16:	e7f1      	b.n	8005afc <_realloc_r+0x40>

08005b18 <_malloc_usable_size_r>:
 8005b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1c:	1f18      	subs	r0, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bfbc      	itt	lt
 8005b22:	580b      	ldrlt	r3, [r1, r0]
 8005b24:	18c0      	addlt	r0, r0, r3
 8005b26:	4770      	bx	lr

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
